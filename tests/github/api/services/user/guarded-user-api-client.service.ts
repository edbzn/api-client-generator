/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from '../../types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, UserAPIClient } from './user-api-client.service';
import { UserAPIClientInterface } from './user-api-client.interface';

import * as models from '../../models';
import * as guards from '../../guards';

@Injectable()
export class GuardedUserAPIClient extends UserAPIClient implements UserAPIClientInterface {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

  getUser(
    args: Exclude<UserAPIClientInterface['getUserParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.User> {
    return super.getUser(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUser(res) || console.error(`TypeGuard for response 'models.User' caught inconsistency.`, res)));
  }

  patchUser(
    args: Exclude<UserAPIClientInterface['patchUserParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.User> {
    return super.patchUser(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUser(res) || console.error(`TypeGuard for response 'models.User' caught inconsistency.`, res)));
  }

  getUserEmails(
    args: Exclude<UserAPIClientInterface['getUserEmailsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.UserEmails> {
    return super.getUserEmails(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUserEmails(res) || console.error(`TypeGuard for response 'models.UserEmails' caught inconsistency.`, res)));
  }

  getUserFollowers(
    args: Exclude<UserAPIClientInterface['getUserFollowersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getUserFollowers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getUserFollowing(
    args: Exclude<UserAPIClientInterface['getUserFollowingParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getUserFollowing(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getUserIssues(
    args: Exclude<UserAPIClientInterface['getUserIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Issues> {
    return super.getUserIssues(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssues(res) || console.error(`TypeGuard for response 'models.Issues' caught inconsistency.`, res)));
  }

  getUserKeys(
    args: Exclude<UserAPIClientInterface['getUserKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gitignore> {
    return super.getUserKeys(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGitignore(res) || console.error(`TypeGuard for response 'models.Gitignore' caught inconsistency.`, res)));
  }

  postUserKeys(
    args: Exclude<UserAPIClientInterface['postUserKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.UserKeysKeyId> {
    return super.postUserKeys(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUserKeysKeyId(res) || console.error(`TypeGuard for response 'models.UserKeysKeyId' caught inconsistency.`, res)));
  }

  getUserKeysKeyId(
    args: Exclude<UserAPIClientInterface['getUserKeysKeyIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.UserKeysKeyId> {
    return super.getUserKeysKeyId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUserKeysKeyId(res) || console.error(`TypeGuard for response 'models.UserKeysKeyId' caught inconsistency.`, res)));
  }

  getUserOrgs(
    args: Exclude<UserAPIClientInterface['getUserOrgsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gitignore> {
    return super.getUserOrgs(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGitignore(res) || console.error(`TypeGuard for response 'models.Gitignore' caught inconsistency.`, res)));
  }

  getUserRepos(
    args: Exclude<UserAPIClientInterface['getUserReposParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repos> {
    return super.getUserRepos(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepos(res) || console.error(`TypeGuard for response 'models.Repos' caught inconsistency.`, res)));
  }

  postUserRepos(
    args: Exclude<UserAPIClientInterface['postUserReposParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repos> {
    return super.postUserRepos(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepos(res) || console.error(`TypeGuard for response 'models.Repos' caught inconsistency.`, res)));
  }

  getUserStarred(
    args: Exclude<UserAPIClientInterface['getUserStarredParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gitignore> {
    return super.getUserStarred(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGitignore(res) || console.error(`TypeGuard for response 'models.Gitignore' caught inconsistency.`, res)));
  }

  getUserSubscriptions(
    args: Exclude<UserAPIClientInterface['getUserSubscriptionsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.UserIdSubscribitions> {
    return super.getUserSubscriptions(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUserIdSubscribitions(res) || console.error(`TypeGuard for response 'models.UserIdSubscribitions' caught inconsistency.`, res)));
  }

  getUserTeams(
    args: Exclude<UserAPIClientInterface['getUserTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.TeamsList> {
    return super.getUserTeams(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTeamsList(res) || console.error(`TypeGuard for response 'models.TeamsList' caught inconsistency.`, res)));
  }

}
