/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';import { HttpOptions } from '../../types';

import * as models from '../../models';
export interface LegacyAPIClientInterface {
  /**
   * Arguments object for method `getLegacyIssuesSearchOwnerRepositoryStateKeyword`.
   */
  getLegacyIssuesSearchOwnerRepositoryStateKeywordParams?: {
    /** The search term. */
    keyword: string,
    /** Indicates the state of the issues to return. Can be either open or closed. */
    state: ('open' | 'closed'),
    owner: string,
    repository: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Find issues by state and keyword.
   * Response generated for [ 200 ] HTTP response code.
   */
  getLegacyIssuesSearchOwnerRepositoryStateKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyIssuesSearchOwnerRepositoryStateKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.SearchIssuesByKeyword>;
  getLegacyIssuesSearchOwnerRepositoryStateKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyIssuesSearchOwnerRepositoryStateKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.SearchIssuesByKeyword>>;
  getLegacyIssuesSearchOwnerRepositoryStateKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyIssuesSearchOwnerRepositoryStateKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.SearchIssuesByKeyword>>;

  /**
   * Arguments object for method `getLegacyReposSearchKeyword`.
   */
  getLegacyReposSearchKeywordParams?: {
    /** The search term */
    keyword: string,
    /**
     * The sort field. if sort param is provided. Can be either asc or desc.
     * If not set, server will use the default value: desc
     */
    order?: ('desc' | 'asc'),
    /** Filter results by language */
    language?: string,
    /** The page number to fetch */
    startPage?: string,
    /** The sort field. One of stars, forks, or updated. Default: results are sorted by best match. */
    sort?: ('updated' | 'stars' | 'forks'),
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the start_page parameter.
   * Response generated for [ 200 ] HTTP response code.
   */
  getLegacyReposSearchKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyReposSearchKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.SearchRepositoriesByKeyword>;
  getLegacyReposSearchKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyReposSearchKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.SearchRepositoriesByKeyword>>;
  getLegacyReposSearchKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyReposSearchKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.SearchRepositoriesByKeyword>>;

  /**
   * Arguments object for method `getLegacyUserEmail`.
   */
  getLegacyUserEmailParams?: {
    /** The email address */
    email: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * This API call is added for compatibility reasons only.
   * Response generated for [ 200 ] HTTP response code.
   */
  getLegacyUserEmail(
    args: Exclude<LegacyAPIClientInterface['getLegacyUserEmailParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.SearchUserByEmail>;
  getLegacyUserEmail(
    args: Exclude<LegacyAPIClientInterface['getLegacyUserEmailParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.SearchUserByEmail>>;
  getLegacyUserEmail(
    args: Exclude<LegacyAPIClientInterface['getLegacyUserEmailParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.SearchUserByEmail>>;

  /**
   * Arguments object for method `getLegacyUserSearchKeyword`.
   */
  getLegacyUserSearchKeywordParams?: {
    /** The search term */
    keyword: string,
    /**
     * The sort field. if sort param is provided. Can be either asc or desc.
     * If not set, server will use the default value: desc
     */
    order?: ('desc' | 'asc'),
    /** The page number to fetch */
    startPage?: string,
    /** The sort field. One of stars, forks, or updated. Default: results are sorted by best match. */
    sort?: ('updated' | 'stars' | 'forks'),
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Find users by keyword.
   * Response generated for [ 200 ] HTTP response code.
   */
  getLegacyUserSearchKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyUserSearchKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.SearchUsersByKeyword>;
  getLegacyUserSearchKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyUserSearchKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.SearchUsersByKeyword>>;
  getLegacyUserSearchKeyword(
    args: Exclude<LegacyAPIClientInterface['getLegacyUserSearchKeywordParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.SearchUsersByKeyword>>;

}
