/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';import { HttpOptions } from '../../types';

import * as models from '../../models';
export interface OrgsAPIClientInterface {
  /**
   * Arguments object for method `getOrgsOrg`.
   */
  getOrgsOrgParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Get an Organization.
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Organization>;
  getOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Organization>>;
  getOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Organization>>;

  /**
   * Arguments object for method `patchOrgsOrg`.
   */
  patchOrgsOrgParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
    body: models.PatchOrg,
  };

  /**
   * Edit an Organization.
   * Response generated for [ 200 ] HTTP response code.
   */
  patchOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['patchOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Organization>;
  patchOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['patchOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Organization>>;
  patchOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['patchOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Organization>>;

  /**
   * Arguments object for method `getOrgsOrgEvents`.
   */
  getOrgsOrgEventsParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List public events for an organization.
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrgEvents(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Events>;
  getOrgsOrgEvents(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Events>>;
  getOrgsOrgEvents(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Events>>;

  /**
   * Arguments object for method `getOrgsOrgIssues`.
   */
  getOrgsOrgIssuesParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * Issues assigned to you / created by you / mentioning you / you're
     * subscribed to updates for / All issues the authenticated user can see
     * 
     * If not set, server will use the default value: all
     */
    filter: ('assigned' | 'created' | 'mentioned' | 'subscribed' | 'all'),
    /** If not set, server will use the default value: open */
    state: ('open' | 'closed'),
    /** String list of comma separated Label names. Example - bug,ui,@high. */
    labels: string,
    /** If not set, server will use the default value: created */
    sort: ('created' | 'updated' | 'comments'),
    /** If not set, server will use the default value: desc */
    direction: ('asc' | 'desc'),
    /**
     * Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     * Only issues updated at or after this time are returned.
     * 
     */
    since?: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List issues.
   * List all issues for a given organization for the authenticated user.
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrgIssues(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Issues>;
  getOrgsOrgIssues(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Issues>>;
  getOrgsOrgIssues(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Issues>>;

  /**
   * Arguments object for method `getOrgsOrgMembers`.
   */
  getOrgsOrgMembersParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Members list.
   * List all users who are members of an organization. A member is a user tha
   * belongs to at least 1 team in the organization. If the authenticated user
   * is also an owner of this organization then both concealed and public members
   * will be returned. If the requester is not an owner of the organization the
   * query will be redirected to the public members list.
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrgMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Users>;
  getOrgsOrgMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Users>>;
  getOrgsOrgMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Users>>;

  /**
   * Arguments object for method `deleteOrgsOrgMembersUsername`.
   */
  deleteOrgsOrgMembersUsernameParams?: {
    /** Name of organisation. */
    org: string,
    /** Name of the user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Remove a member.
   * Removing a user from this list will remove them from all teams and they
   * will no longer have any access to the organization's repositories.
   * 
   * Response generated for [ 204 ] HTTP response code.
   */
  deleteOrgsOrgMembersUsername(
    args: Exclude<OrgsAPIClientInterface['deleteOrgsOrgMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteOrgsOrgMembersUsername(
    args: Exclude<OrgsAPIClientInterface['deleteOrgsOrgMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteOrgsOrgMembersUsername(
    args: Exclude<OrgsAPIClientInterface['deleteOrgsOrgMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getOrgsOrgMembersUsername`.
   */
  getOrgsOrgMembersUsernameParams?: {
    /** Name of organisation. */
    org: string,
    /** Name of the user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Check if a user is, publicly or privately, a member of the organization.
   * Response generated for [ 204 ] HTTP response code.
   */
  getOrgsOrgMembersUsername(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getOrgsOrgMembersUsername(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getOrgsOrgMembersUsername(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getOrgsOrgPublicMembers`.
   */
  getOrgsOrgPublicMembersParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Public members list.
   * Members of an organization can choose to have their membership publicized
   * or not.
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrgPublicMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Users>;
  getOrgsOrgPublicMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Users>>;
  getOrgsOrgPublicMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Users>>;

  /**
   * Arguments object for method `deleteOrgsOrgPublicMembersUsername`.
   */
  deleteOrgsOrgPublicMembersUsernameParams?: {
    /** Name of organisation. */
    org: string,
    /** Name of the user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Conceal a user's membership.
   * Response generated for [ 204 ] HTTP response code.
   */
  deleteOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['deleteOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['deleteOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['deleteOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getOrgsOrgPublicMembersUsername`.
   */
  getOrgsOrgPublicMembersUsernameParams?: {
    /** Name of organisation. */
    org: string,
    /** Name of the user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Check public membership.
   * Response generated for [ 204 ] HTTP response code.
   */
  getOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `putOrgsOrgPublicMembersUsername`.
   */
  putOrgsOrgPublicMembersUsernameParams?: {
    /** Name of organisation. */
    org: string,
    /** Name of the user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Publicize a user's membership.
   * Response generated for [ 204 ] HTTP response code.
   */
  putOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['putOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  putOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['putOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  putOrgsOrgPublicMembersUsername(
    args: Exclude<OrgsAPIClientInterface['putOrgsOrgPublicMembersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getOrgsOrgRepos`.
   */
  getOrgsOrgReposParams?: {
    /** Name of organisation. */
    org: string,
    /** If not set, server will use the default value: all */
    type?: ('all' | 'public' | 'private' | 'forks' | 'sources' | 'member'),
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List repositories for the specified org.
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Repos>;
  getOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Repos>>;
  getOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Repos>>;

  /**
   * Arguments object for method `postOrgsOrgRepos`.
   */
  postOrgsOrgReposParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
    body: models.PostRepo,
  };

  /**
   * Create a new repository for the authenticated user. OAuth users must supply
   * repo scope.
   * 
   * Response generated for [ 201 ] HTTP response code.
   */
  postOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Repos>;
  postOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Repos>>;
  postOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Repos>>;

  /**
   * Arguments object for method `getOrgsOrgTeams`.
   */
  getOrgsOrgTeamsParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List teams.
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Teams>;
  getOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Teams>>;
  getOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Teams>>;

  /**
   * Arguments object for method `postOrgsOrgTeams`.
   */
  postOrgsOrgTeamsParams?: {
    /** Name of organisation. */
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
    body: models.OrgTeamsPost,
  };

  /**
   * Create team.
   * In order to create a team, the authenticated user must be an owner of organization.
   * 
   * Response generated for [ 201 ] HTTP response code.
   */
  postOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Team>;
  postOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Team>>;
  postOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Team>>;

}
