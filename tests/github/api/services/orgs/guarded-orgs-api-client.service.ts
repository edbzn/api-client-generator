/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from '../../types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, OrgsAPIClient } from './orgs-api-client.service';
import { OrgsAPIClientInterface } from './orgs-api-client.interface';

import * as models from '../../models';
import * as guards from '../../guards';

@Injectable()
export class GuardedOrgsAPIClient extends OrgsAPIClient implements OrgsAPIClientInterface {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

  getOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Organization> {
    return super.getOrgsOrg(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isOrganization(res) || console.error(`TypeGuard for response 'models.Organization' caught inconsistency.`, res)));
  }

  patchOrgsOrg(
    args: Exclude<OrgsAPIClientInterface['patchOrgsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Organization> {
    return super.patchOrgsOrg(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isOrganization(res) || console.error(`TypeGuard for response 'models.Organization' caught inconsistency.`, res)));
  }

  getOrgsOrgEvents(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Events> {
    return super.getOrgsOrgEvents(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isEvents(res) || console.error(`TypeGuard for response 'models.Events' caught inconsistency.`, res)));
  }

  getOrgsOrgIssues(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Issues> {
    return super.getOrgsOrgIssues(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssues(res) || console.error(`TypeGuard for response 'models.Issues' caught inconsistency.`, res)));
  }

  getOrgsOrgMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getOrgsOrgMembers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getOrgsOrgPublicMembers(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgPublicMembersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getOrgsOrgPublicMembers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repos> {
    return super.getOrgsOrgRepos(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepos(res) || console.error(`TypeGuard for response 'models.Repos' caught inconsistency.`, res)));
  }

  postOrgsOrgRepos(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgReposParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repos> {
    return super.postOrgsOrgRepos(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepos(res) || console.error(`TypeGuard for response 'models.Repos' caught inconsistency.`, res)));
  }

  getOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['getOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Teams> {
    return super.getOrgsOrgTeams(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTeams(res) || console.error(`TypeGuard for response 'models.Teams' caught inconsistency.`, res)));
  }

  postOrgsOrgTeams(
    args: Exclude<OrgsAPIClientInterface['postOrgsOrgTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Team> {
    return super.postOrgsOrgTeams(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTeam(res) || console.error(`TypeGuard for response 'models.Team' caught inconsistency.`, res)));
  }

}
