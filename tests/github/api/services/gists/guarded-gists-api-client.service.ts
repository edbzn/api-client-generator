/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from '../../types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, GistsAPIClient } from './gists-api-client.service';
import { GistsAPIClientInterface } from './gists-api-client.interface';

import * as models from '../../models';
import * as guards from '../../guards';

@Injectable()
export class GuardedGistsAPIClient extends GistsAPIClient implements GistsAPIClientInterface {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

  getGists(
    args: Exclude<GistsAPIClientInterface['getGistsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gists> {
    return super.getGists(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGists(res) || console.error(`TypeGuard for response 'models.Gists' caught inconsistency.`, res)));
  }

  postGists(
    args: Exclude<GistsAPIClientInterface['postGistsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gist> {
    return super.postGists(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGist(res) || console.error(`TypeGuard for response 'models.Gist' caught inconsistency.`, res)));
  }

  getGistsPublic(
    args: Exclude<GistsAPIClientInterface['getGistsPublicParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gists> {
    return super.getGistsPublic(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGists(res) || console.error(`TypeGuard for response 'models.Gists' caught inconsistency.`, res)));
  }

  getGistsStarred(
    args: Exclude<GistsAPIClientInterface['getGistsStarredParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gists> {
    return super.getGistsStarred(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGists(res) || console.error(`TypeGuard for response 'models.Gists' caught inconsistency.`, res)));
  }

  getGistsId(
    args: Exclude<GistsAPIClientInterface['getGistsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gist> {
    return super.getGistsId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGist(res) || console.error(`TypeGuard for response 'models.Gist' caught inconsistency.`, res)));
  }

  patchGistsId(
    args: Exclude<GistsAPIClientInterface['patchGistsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gist> {
    return super.patchGistsId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGist(res) || console.error(`TypeGuard for response 'models.Gist' caught inconsistency.`, res)));
  }

  getGistsIdComments(
    args: Exclude<GistsAPIClientInterface['getGistsIdCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Comments> {
    return super.getGistsIdComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isComments(res) || console.error(`TypeGuard for response 'models.Comments' caught inconsistency.`, res)));
  }

  postGistsIdComments(
    args: Exclude<GistsAPIClientInterface['postGistsIdCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Comment> {
    return super.postGistsIdComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isComment(res) || console.error(`TypeGuard for response 'models.Comment' caught inconsistency.`, res)));
  }

  getGistsIdCommentsCommentId(
    args: Exclude<GistsAPIClientInterface['getGistsIdCommentsCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Comment> {
    return super.getGistsIdCommentsCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isComment(res) || console.error(`TypeGuard for response 'models.Comment' caught inconsistency.`, res)));
  }

  patchGistsIdCommentsCommentId(
    args: Exclude<GistsAPIClientInterface['patchGistsIdCommentsCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Comment> {
    return super.patchGistsIdCommentsCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isComment(res) || console.error(`TypeGuard for response 'models.Comment' caught inconsistency.`, res)));
  }

}
