/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from '../../types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, ReposAPIClient } from './repos-api-client.service';
import { ReposAPIClientInterface } from './repos-api-client.interface';

import * as models from '../../models';
import * as guards from '../../guards';

@Injectable()
export class GuardedReposAPIClient extends ReposAPIClient implements ReposAPIClientInterface {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

  getReposOwnerRepo(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repo> {
    return super.getReposOwnerRepo(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepo(res) || console.error(`TypeGuard for response 'models.Repo' caught inconsistency.`, res)));
  }

  patchReposOwnerRepo(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repo> {
    return super.patchReposOwnerRepo(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepo(res) || console.error(`TypeGuard for response 'models.Repo' caught inconsistency.`, res)));
  }

  getReposOwnerRepoAssignees(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoAssigneesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Assignees> {
    return super.getReposOwnerRepoAssignees(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isAssignees(res) || console.error(`TypeGuard for response 'models.Assignees' caught inconsistency.`, res)));
  }

  getReposOwnerRepoBranches(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoBranchesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Branches> {
    return super.getReposOwnerRepoBranches(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isBranches(res) || console.error(`TypeGuard for response 'models.Branches' caught inconsistency.`, res)));
  }

  getReposOwnerRepoBranchesBranch(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoBranchesBranchParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Branch> {
    return super.getReposOwnerRepoBranchesBranch(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isBranch(res) || console.error(`TypeGuard for response 'models.Branch' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCollaborators(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCollaboratorsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getReposOwnerRepoCollaborators(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getReposOwnerRepoComments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.RepoComments> {
    return super.getReposOwnerRepoComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepoComments(res) || console.error(`TypeGuard for response 'models.RepoComments' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCommentsCommentId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCommentsCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CommitComments> {
    return super.getReposOwnerRepoCommentsCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommitComments(res) || console.error(`TypeGuard for response 'models.CommitComments' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoCommentsCommentId(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoCommentsCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CommitComments> {
    return super.patchReposOwnerRepoCommentsCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommitComments(res) || console.error(`TypeGuard for response 'models.CommitComments' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCommits(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCommitsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Commits> {
    return super.getReposOwnerRepoCommits(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommits(res) || console.error(`TypeGuard for response 'models.Commits' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCommitsRefStatus(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCommitsRefStatusParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.RefStatus> {
    return super.getReposOwnerRepoCommitsRefStatus(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRefStatus(res) || console.error(`TypeGuard for response 'models.RefStatus' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCommitsShaCode(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCommitsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Commit> {
    return super.getReposOwnerRepoCommitsShaCode(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommit(res) || console.error(`TypeGuard for response 'models.Commit' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCommitsShaCodeComments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCommitsShaCodeCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.RepoComments> {
    return super.getReposOwnerRepoCommitsShaCodeComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepoComments(res) || console.error(`TypeGuard for response 'models.RepoComments' caught inconsistency.`, res)));
  }

  postReposOwnerRepoCommitsShaCodeComments(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoCommitsShaCodeCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CommitComments> {
    return super.postReposOwnerRepoCommitsShaCodeComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommitComments(res) || console.error(`TypeGuard for response 'models.CommitComments' caught inconsistency.`, res)));
  }

  getReposOwnerRepoCompareBaseIdHeadId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoCompareBaseIdHeadIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CompareCommits> {
    return super.getReposOwnerRepoCompareBaseIdHeadId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCompareCommits(res) || console.error(`TypeGuard for response 'models.CompareCommits' caught inconsistency.`, res)));
  }

  deleteReposOwnerRepoContentsPath(
    args: Exclude<ReposAPIClientInterface['deleteReposOwnerRepoContentsPathParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.DeleteFile> {
    return super.deleteReposOwnerRepoContentsPath(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isDeleteFile(res) || console.error(`TypeGuard for response 'models.DeleteFile' caught inconsistency.`, res)));
  }

  getReposOwnerRepoContentsPath(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoContentsPathParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.ContentsPath> {
    return super.getReposOwnerRepoContentsPath(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isContentsPath(res) || console.error(`TypeGuard for response 'models.ContentsPath' caught inconsistency.`, res)));
  }

  putReposOwnerRepoContentsPath(
    args: Exclude<ReposAPIClientInterface['putReposOwnerRepoContentsPathParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CreateFile> {
    return super.putReposOwnerRepoContentsPath(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCreateFile(res) || console.error(`TypeGuard for response 'models.CreateFile' caught inconsistency.`, res)));
  }

  getReposOwnerRepoContributors(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoContributorsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Contributors> {
    return super.getReposOwnerRepoContributors(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isContributors(res) || console.error(`TypeGuard for response 'models.Contributors' caught inconsistency.`, res)));
  }

  getReposOwnerRepoDeployments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoDeploymentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.RepoDeployments> {
    return super.getReposOwnerRepoDeployments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepoDeployments(res) || console.error(`TypeGuard for response 'models.RepoDeployments' caught inconsistency.`, res)));
  }

  postReposOwnerRepoDeployments(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoDeploymentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.DeploymentResp> {
    return super.postReposOwnerRepoDeployments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isDeploymentResp(res) || console.error(`TypeGuard for response 'models.DeploymentResp' caught inconsistency.`, res)));
  }

  getReposOwnerRepoDeploymentsIdStatuses(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoDeploymentsIdStatusesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.DeploymentStatuses> {
    return super.getReposOwnerRepoDeploymentsIdStatuses(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isDeploymentStatuses(res) || console.error(`TypeGuard for response 'models.DeploymentStatuses' caught inconsistency.`, res)));
  }

  getReposOwnerRepoDownloads(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoDownloadsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Downloads> {
    return super.getReposOwnerRepoDownloads(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isDownloads(res) || console.error(`TypeGuard for response 'models.Downloads' caught inconsistency.`, res)));
  }

  getReposOwnerRepoDownloadsDownloadId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoDownloadsDownloadIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Downloads> {
    return super.getReposOwnerRepoDownloadsDownloadId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isDownloads(res) || console.error(`TypeGuard for response 'models.Downloads' caught inconsistency.`, res)));
  }

  getReposOwnerRepoEvents(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Events> {
    return super.getReposOwnerRepoEvents(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isEvents(res) || console.error(`TypeGuard for response 'models.Events' caught inconsistency.`, res)));
  }

  getReposOwnerRepoForks(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoForksParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Forks> {
    return super.getReposOwnerRepoForks(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isForks(res) || console.error(`TypeGuard for response 'models.Forks' caught inconsistency.`, res)));
  }

  postReposOwnerRepoForks(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoForksParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Fork> {
    return super.postReposOwnerRepoForks(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isFork(res) || console.error(`TypeGuard for response 'models.Fork' caught inconsistency.`, res)));
  }

  postReposOwnerRepoGitBlobs(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Blobs> {
    return super.postReposOwnerRepoGitBlobs(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isBlobs(res) || console.error(`TypeGuard for response 'models.Blobs' caught inconsistency.`, res)));
  }

  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Blob> {
    return super.getReposOwnerRepoGitBlobsShaCode(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isBlob(res) || console.error(`TypeGuard for response 'models.Blob' caught inconsistency.`, res)));
  }

  postReposOwnerRepoGitCommits(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoGitCommitsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.GitCommit> {
    return super.postReposOwnerRepoGitCommits(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGitCommit(res) || console.error(`TypeGuard for response 'models.GitCommit' caught inconsistency.`, res)));
  }

  getReposOwnerRepoGitCommitsShaCode(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoGitCommitsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.RepoCommit> {
    return super.getReposOwnerRepoGitCommitsShaCode(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepoCommit(res) || console.error(`TypeGuard for response 'models.RepoCommit' caught inconsistency.`, res)));
  }

  getReposOwnerRepoGitRefs(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoGitRefsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Refs> {
    return super.getReposOwnerRepoGitRefs(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRefs(res) || console.error(`TypeGuard for response 'models.Refs' caught inconsistency.`, res)));
  }

  postReposOwnerRepoGitRefs(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoGitRefsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.HeadBranch> {
    return super.postReposOwnerRepoGitRefs(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHeadBranch(res) || console.error(`TypeGuard for response 'models.HeadBranch' caught inconsistency.`, res)));
  }

  getReposOwnerRepoGitRefsRef(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoGitRefsRefParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.HeadBranch> {
    return super.getReposOwnerRepoGitRefsRef(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHeadBranch(res) || console.error(`TypeGuard for response 'models.HeadBranch' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoGitRefsRef(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoGitRefsRefParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.HeadBranch> {
    return super.patchReposOwnerRepoGitRefsRef(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHeadBranch(res) || console.error(`TypeGuard for response 'models.HeadBranch' caught inconsistency.`, res)));
  }

  postReposOwnerRepoGitTags(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoGitTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Tags> {
    return super.postReposOwnerRepoGitTags(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTags(res) || console.error(`TypeGuard for response 'models.Tags' caught inconsistency.`, res)));
  }

  getReposOwnerRepoGitTagsShaCode(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoGitTagsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Tag> {
    return super.getReposOwnerRepoGitTagsShaCode(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTag(res) || console.error(`TypeGuard for response 'models.Tag' caught inconsistency.`, res)));
  }

  postReposOwnerRepoGitTrees(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoGitTreesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Trees> {
    return super.postReposOwnerRepoGitTrees(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTrees(res) || console.error(`TypeGuard for response 'models.Trees' caught inconsistency.`, res)));
  }

  getReposOwnerRepoGitTreesShaCode(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoGitTreesShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Tree> {
    return super.getReposOwnerRepoGitTreesShaCode(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTree(res) || console.error(`TypeGuard for response 'models.Tree' caught inconsistency.`, res)));
  }

  getReposOwnerRepoHooks(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoHooksParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Hook> {
    return super.getReposOwnerRepoHooks(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHook(res) || console.error(`TypeGuard for response 'models.Hook' caught inconsistency.`, res)));
  }

  postReposOwnerRepoHooks(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoHooksParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Hook> {
    return super.postReposOwnerRepoHooks(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHook(res) || console.error(`TypeGuard for response 'models.Hook' caught inconsistency.`, res)));
  }

  getReposOwnerRepoHooksHookId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoHooksHookIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Hook> {
    return super.getReposOwnerRepoHooksHookId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHook(res) || console.error(`TypeGuard for response 'models.Hook' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoHooksHookId(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoHooksHookIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Hook> {
    return super.patchReposOwnerRepoHooksHookId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isHook(res) || console.error(`TypeGuard for response 'models.Hook' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssues(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Issues> {
    return super.getReposOwnerRepoIssues(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssues(res) || console.error(`TypeGuard for response 'models.Issues' caught inconsistency.`, res)));
  }

  postReposOwnerRepoIssues(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Issue> {
    return super.postReposOwnerRepoIssues(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssue(res) || console.error(`TypeGuard for response 'models.Issue' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesComments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.IssuesComments> {
    return super.getReposOwnerRepoIssuesComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssuesComments(res) || console.error(`TypeGuard for response 'models.IssuesComments' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesCommentId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.IssuesComment> {
    return super.getReposOwnerRepoIssuesCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssuesComment(res) || console.error(`TypeGuard for response 'models.IssuesComment' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoIssuesCommentId(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoIssuesCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.IssuesComment> {
    return super.patchReposOwnerRepoIssuesCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssuesComment(res) || console.error(`TypeGuard for response 'models.IssuesComment' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesEvents(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Events> {
    return super.getReposOwnerRepoIssuesEvents(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isEvents(res) || console.error(`TypeGuard for response 'models.Events' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesEventId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesEventIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Event> {
    return super.getReposOwnerRepoIssuesEventId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isEvent(res) || console.error(`TypeGuard for response 'models.Event' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesNumber(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesNumberParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Issue> {
    return super.getReposOwnerRepoIssuesNumber(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssue(res) || console.error(`TypeGuard for response 'models.Issue' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoIssuesNumber(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoIssuesNumberParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Issue> {
    return super.patchReposOwnerRepoIssuesNumber(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssue(res) || console.error(`TypeGuard for response 'models.Issue' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesNumberComments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesNumberCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.IssuesComments> {
    return super.getReposOwnerRepoIssuesNumberComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssuesComments(res) || console.error(`TypeGuard for response 'models.IssuesComments' caught inconsistency.`, res)));
  }

  postReposOwnerRepoIssuesNumberComments(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoIssuesNumberCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.IssuesComment> {
    return super.postReposOwnerRepoIssuesNumberComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssuesComment(res) || console.error(`TypeGuard for response 'models.IssuesComment' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesNumberEvents(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesNumberEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Events> {
    return super.getReposOwnerRepoIssuesNumberEvents(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isEvents(res) || console.error(`TypeGuard for response 'models.Events' caught inconsistency.`, res)));
  }

  getReposOwnerRepoIssuesNumberLabels(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoIssuesNumberLabelsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Labels> {
    return super.getReposOwnerRepoIssuesNumberLabels(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabels(res) || console.error(`TypeGuard for response 'models.Labels' caught inconsistency.`, res)));
  }

  postReposOwnerRepoIssuesNumberLabels(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoIssuesNumberLabelsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Label> {
    return super.postReposOwnerRepoIssuesNumberLabels(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabel(res) || console.error(`TypeGuard for response 'models.Label' caught inconsistency.`, res)));
  }

  putReposOwnerRepoIssuesNumberLabels(
    args: Exclude<ReposAPIClientInterface['putReposOwnerRepoIssuesNumberLabelsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Label> {
    return super.putReposOwnerRepoIssuesNumberLabels(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabel(res) || console.error(`TypeGuard for response 'models.Label' caught inconsistency.`, res)));
  }

  getReposOwnerRepoKeys(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Keys> {
    return super.getReposOwnerRepoKeys(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isKeys(res) || console.error(`TypeGuard for response 'models.Keys' caught inconsistency.`, res)));
  }

  postReposOwnerRepoKeys(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.UserKeysKeyId> {
    return super.postReposOwnerRepoKeys(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUserKeysKeyId(res) || console.error(`TypeGuard for response 'models.UserKeysKeyId' caught inconsistency.`, res)));
  }

  getReposOwnerRepoKeysKeyId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoKeysKeyIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.UserKeysKeyId> {
    return super.getReposOwnerRepoKeysKeyId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUserKeysKeyId(res) || console.error(`TypeGuard for response 'models.UserKeysKeyId' caught inconsistency.`, res)));
  }

  getReposOwnerRepoLabels(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoLabelsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Labels> {
    return super.getReposOwnerRepoLabels(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabels(res) || console.error(`TypeGuard for response 'models.Labels' caught inconsistency.`, res)));
  }

  postReposOwnerRepoLabels(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoLabelsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Label> {
    return super.postReposOwnerRepoLabels(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabel(res) || console.error(`TypeGuard for response 'models.Label' caught inconsistency.`, res)));
  }

  getReposOwnerRepoLabelsName(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoLabelsNameParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Label> {
    return super.getReposOwnerRepoLabelsName(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabel(res) || console.error(`TypeGuard for response 'models.Label' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoLabelsName(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoLabelsNameParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Label> {
    return super.patchReposOwnerRepoLabelsName(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabel(res) || console.error(`TypeGuard for response 'models.Label' caught inconsistency.`, res)));
  }

  getReposOwnerRepoLanguages(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoLanguagesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Languages> {
    return super.getReposOwnerRepoLanguages(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLanguages(res) || console.error(`TypeGuard for response 'models.Languages' caught inconsistency.`, res)));
  }

  postReposOwnerRepoMerges(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoMergesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.MergesSuccessful> {
    return super.postReposOwnerRepoMerges(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isMergesSuccessful(res) || console.error(`TypeGuard for response 'models.MergesSuccessful' caught inconsistency.`, res)));
  }

  getReposOwnerRepoMilestones(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoMilestonesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Milestone> {
    return super.getReposOwnerRepoMilestones(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isMilestone(res) || console.error(`TypeGuard for response 'models.Milestone' caught inconsistency.`, res)));
  }

  postReposOwnerRepoMilestones(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoMilestonesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Milestone> {
    return super.postReposOwnerRepoMilestones(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isMilestone(res) || console.error(`TypeGuard for response 'models.Milestone' caught inconsistency.`, res)));
  }

  getReposOwnerRepoMilestonesNumber(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoMilestonesNumberParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Milestone> {
    return super.getReposOwnerRepoMilestonesNumber(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isMilestone(res) || console.error(`TypeGuard for response 'models.Milestone' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoMilestonesNumber(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoMilestonesNumberParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Milestone> {
    return super.patchReposOwnerRepoMilestonesNumber(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isMilestone(res) || console.error(`TypeGuard for response 'models.Milestone' caught inconsistency.`, res)));
  }

  getReposOwnerRepoMilestonesNumberLabels(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoMilestonesNumberLabelsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Labels> {
    return super.getReposOwnerRepoMilestonesNumberLabels(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isLabels(res) || console.error(`TypeGuard for response 'models.Labels' caught inconsistency.`, res)));
  }

  getReposOwnerRepoNotifications(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoNotificationsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Notifications> {
    return super.getReposOwnerRepoNotifications(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isNotifications(res) || console.error(`TypeGuard for response 'models.Notifications' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPulls(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Pulls> {
    return super.getReposOwnerRepoPulls(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPulls(res) || console.error(`TypeGuard for response 'models.Pulls' caught inconsistency.`, res)));
  }

  postReposOwnerRepoPulls(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoPullsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Pulls> {
    return super.postReposOwnerRepoPulls(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPulls(res) || console.error(`TypeGuard for response 'models.Pulls' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPullsComments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.IssuesComments> {
    return super.getReposOwnerRepoPullsComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isIssuesComments(res) || console.error(`TypeGuard for response 'models.IssuesComments' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPullsCommentId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.PullsComment> {
    return super.getReposOwnerRepoPullsCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPullsComment(res) || console.error(`TypeGuard for response 'models.PullsComment' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoPullsCommentId(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoPullsCommentIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.PullsComment> {
    return super.patchReposOwnerRepoPullsCommentId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPullsComment(res) || console.error(`TypeGuard for response 'models.PullsComment' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPullsNumber(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsNumberParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.PullRequest> {
    return super.getReposOwnerRepoPullsNumber(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPullRequest(res) || console.error(`TypeGuard for response 'models.PullRequest' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoPullsNumber(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoPullsNumberParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repo> {
    return super.patchReposOwnerRepoPullsNumber(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepo(res) || console.error(`TypeGuard for response 'models.Repo' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPullsNumberComments(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsNumberCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.PullsComment> {
    return super.getReposOwnerRepoPullsNumberComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPullsComment(res) || console.error(`TypeGuard for response 'models.PullsComment' caught inconsistency.`, res)));
  }

  postReposOwnerRepoPullsNumberComments(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoPullsNumberCommentsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.PullsComment> {
    return super.postReposOwnerRepoPullsNumberComments(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPullsComment(res) || console.error(`TypeGuard for response 'models.PullsComment' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPullsNumberCommits(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsNumberCommitsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Commits> {
    return super.getReposOwnerRepoPullsNumberCommits(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommits(res) || console.error(`TypeGuard for response 'models.Commits' caught inconsistency.`, res)));
  }

  getReposOwnerRepoPullsNumberFiles(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoPullsNumberFilesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Pulls> {
    return super.getReposOwnerRepoPullsNumberFiles(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPulls(res) || console.error(`TypeGuard for response 'models.Pulls' caught inconsistency.`, res)));
  }

  putReposOwnerRepoPullsNumberMerge(
    args: Exclude<ReposAPIClientInterface['putReposOwnerRepoPullsNumberMergeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Merge> {
    return super.putReposOwnerRepoPullsNumberMerge(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isMerge(res) || console.error(`TypeGuard for response 'models.Merge' caught inconsistency.`, res)));
  }

  getReposOwnerRepoReadme(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoReadmeParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.ContentsPath> {
    return super.getReposOwnerRepoReadme(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isContentsPath(res) || console.error(`TypeGuard for response 'models.ContentsPath' caught inconsistency.`, res)));
  }

  getReposOwnerRepoReleases(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoReleasesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Releases> {
    return super.getReposOwnerRepoReleases(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isReleases(res) || console.error(`TypeGuard for response 'models.Releases' caught inconsistency.`, res)));
  }

  postReposOwnerRepoReleases(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoReleasesParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Release> {
    return super.postReposOwnerRepoReleases(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRelease(res) || console.error(`TypeGuard for response 'models.Release' caught inconsistency.`, res)));
  }

  getReposOwnerRepoReleasesAssetsId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoReleasesAssetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Asset> {
    return super.getReposOwnerRepoReleasesAssetsId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isAsset(res) || console.error(`TypeGuard for response 'models.Asset' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoReleasesAssetsId(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoReleasesAssetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Asset> {
    return super.patchReposOwnerRepoReleasesAssetsId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isAsset(res) || console.error(`TypeGuard for response 'models.Asset' caught inconsistency.`, res)));
  }

  getReposOwnerRepoReleasesId(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoReleasesIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Release> {
    return super.getReposOwnerRepoReleasesId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRelease(res) || console.error(`TypeGuard for response 'models.Release' caught inconsistency.`, res)));
  }

  patchReposOwnerRepoReleasesId(
    args: Exclude<ReposAPIClientInterface['patchReposOwnerRepoReleasesIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Release> {
    return super.patchReposOwnerRepoReleasesId(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRelease(res) || console.error(`TypeGuard for response 'models.Release' caught inconsistency.`, res)));
  }

  getReposOwnerRepoReleasesIdAssets(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoReleasesIdAssetsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Assets> {
    return super.getReposOwnerRepoReleasesIdAssets(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isAssets(res) || console.error(`TypeGuard for response 'models.Assets' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStargazers(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStargazersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getReposOwnerRepoStargazers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStatsCodeFrequency(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStatsCodeFrequencyParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CodeFrequencyStats> {
    return super.getReposOwnerRepoStatsCodeFrequency(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCodeFrequencyStats(res) || console.error(`TypeGuard for response 'models.CodeFrequencyStats' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStatsCommitActivity(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStatsCommitActivityParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CommitActivityStats> {
    return super.getReposOwnerRepoStatsCommitActivity(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCommitActivityStats(res) || console.error(`TypeGuard for response 'models.CommitActivityStats' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStatsContributors(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStatsContributorsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.ContributorsStats> {
    return super.getReposOwnerRepoStatsContributors(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isContributorsStats(res) || console.error(`TypeGuard for response 'models.ContributorsStats' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStatsParticipation(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStatsParticipationParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.ParticipationStats> {
    return super.getReposOwnerRepoStatsParticipation(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isParticipationStats(res) || console.error(`TypeGuard for response 'models.ParticipationStats' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStatsPunchCard(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStatsPunchCardParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.CodeFrequencyStats> {
    return super.getReposOwnerRepoStatsPunchCard(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isCodeFrequencyStats(res) || console.error(`TypeGuard for response 'models.CodeFrequencyStats' caught inconsistency.`, res)));
  }

  getReposOwnerRepoStatusesRef(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoStatusesRefParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Ref> {
    return super.getReposOwnerRepoStatusesRef(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRef(res) || console.error(`TypeGuard for response 'models.Ref' caught inconsistency.`, res)));
  }

  postReposOwnerRepoStatusesRef(
    args: Exclude<ReposAPIClientInterface['postReposOwnerRepoStatusesRefParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Ref> {
    return super.postReposOwnerRepoStatusesRef(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRef(res) || console.error(`TypeGuard for response 'models.Ref' caught inconsistency.`, res)));
  }

  getReposOwnerRepoSubscribers(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoSubscribersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getReposOwnerRepoSubscribers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getReposOwnerRepoSubscription(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoSubscriptionParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Subscribition> {
    return super.getReposOwnerRepoSubscription(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isSubscribition(res) || console.error(`TypeGuard for response 'models.Subscribition' caught inconsistency.`, res)));
  }

  putReposOwnerRepoSubscription(
    args: Exclude<ReposAPIClientInterface['putReposOwnerRepoSubscriptionParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Subscribition> {
    return super.putReposOwnerRepoSubscription(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isSubscribition(res) || console.error(`TypeGuard for response 'models.Subscribition' caught inconsistency.`, res)));
  }

  getReposOwnerRepoTags(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Tags> {
    return super.getReposOwnerRepoTags(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTags(res) || console.error(`TypeGuard for response 'models.Tags' caught inconsistency.`, res)));
  }

  getReposOwnerRepoTeams(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoTeamsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Teams> {
    return super.getReposOwnerRepoTeams(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isTeams(res) || console.error(`TypeGuard for response 'models.Teams' caught inconsistency.`, res)));
  }

  getReposOwnerRepoWatchers(
    args: Exclude<ReposAPIClientInterface['getReposOwnerRepoWatchersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getReposOwnerRepoWatchers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

}
