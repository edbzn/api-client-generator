/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient, HttpResponse, HttpEvent } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { MarkdownAPIClientInterface } from './markdown-api-client.interface';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { USE_DOMAIN, USE_HTTP_OPTIONS, MarkdownAPIClient } from './markdown-api-client.service';
import { DefaultHttpOptions, HttpOptions } from '../../types';

import * as models from '../../models';
import * as guards from '../../guards';

@Injectable()
export class GuardedMarkdownAPIClient extends MarkdownAPIClient implements MarkdownAPIClientInterface {

  constructor(
    readonly httpClient: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
    super(httpClient, domain, options);
  }

  /**
   * Render an arbitrary Markdown document
   * Response generated for [ 200 ] HTTP response code.
   */
  postMarkdown(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  postMarkdown(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  postMarkdown(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  postMarkdown(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {

    return super.postMarkdown(args, requestHttpOptions, observe);
  }

  /**
   * Render a Markdown document in raw mode
   * Response generated for [ 200 ] HTTP response code.
   */
  postMarkdownRaw(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownRawParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  postMarkdownRaw(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownRawParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  postMarkdownRaw(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownRawParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  postMarkdownRaw(
    args: Exclude<MarkdownAPIClientInterface['postMarkdownRawParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {

    return super.postMarkdownRaw(args, requestHttpOptions, observe);
  }

}
