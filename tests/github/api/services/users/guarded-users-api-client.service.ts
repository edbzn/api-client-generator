/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from '../../types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, UsersAPIClient } from './users-api-client.service';
import { UsersAPIClientInterface } from './users-api-client.interface';

import * as models from '../../models';
import * as guards from '../../guards';

@Injectable()
export class GuardedUsersAPIClient extends UsersAPIClient implements UsersAPIClientInterface {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

  getUsers(
    args: Exclude<UsersAPIClientInterface['getUsersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getUsers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getUsersUsername(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getUsersUsername(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getUsersUsernameFollowers(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowersParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Users> {
    return super.getUsersUsernameFollowers(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUsers(res) || console.error(`TypeGuard for response 'models.Users' caught inconsistency.`, res)));
  }

  getUsersUsernameGists(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameGistsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gists> {
    return super.getUsersUsernameGists(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGists(res) || console.error(`TypeGuard for response 'models.Gists' caught inconsistency.`, res)));
  }

  getUsersUsernameKeys(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gitignore> {
    return super.getUsersUsernameKeys(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGitignore(res) || console.error(`TypeGuard for response 'models.Gitignore' caught inconsistency.`, res)));
  }

  getUsersUsernameOrgs(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameOrgsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Gitignore> {
    return super.getUsersUsernameOrgs(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isGitignore(res) || console.error(`TypeGuard for response 'models.Gitignore' caught inconsistency.`, res)));
  }

  getUsersUsernameRepos(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReposParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Repos> {
    return super.getUsersUsernameRepos(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isRepos(res) || console.error(`TypeGuard for response 'models.Repos' caught inconsistency.`, res)));
  }

}
