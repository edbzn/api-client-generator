/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';import { HttpOptions } from '../../types';

import * as models from '../../models';
export interface UsersAPIClientInterface {
  /**
   * Arguments object for method `getUsers`.
   */
  getUsersParams?: {
    /** The integer ID of the last User that you've seen. */
    since?: number,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Get all users.
   * This provides a dump of every user, in the order that they signed up for GitHub.
   * Note: Pagination is powered exclusively by the since parameter. Use the Link
   * header to get the URL for the next page of users.
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsers(
    args?: UsersAPIClientInterface['getUsersParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Users>;
  getUsers(
    args?: UsersAPIClientInterface['getUsersParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Users>>;
  getUsers(
    args?: UsersAPIClientInterface['getUsersParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Users>>;

  /**
   * Arguments object for method `getUsersUsername`.
   */
  getUsersUsernameParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Get a single user.
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersUsername(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Users>;
  getUsersUsername(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Users>>;
  getUsersUsername(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Users>>;

  /**
   * Arguments object for method `getUsersUsernameEvents`.
   */
  getUsersUsernameEventsParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
   * Response generated for [ default ] HTTP response code.
   */
  getUsersUsernameEvents(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameEvents(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameEvents(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getUsersUsernameEventsOrg`.
   */
  getUsersUsernameEventsOrgParams?: {
    /** Name of user. */
    username: string,
    org: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * This is the user's organization dashboard. You must be authenticated as the user to view this.
   * Response generated for [ default ] HTTP response code.
   */
  getUsersUsernameEventsOrg(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameEventsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameEventsOrg(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameEventsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameEventsOrg(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameEventsOrgParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getUsersUsernameFollowers`.
   */
  getUsersUsernameFollowersParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List a user's followers
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersUsernameFollowers(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Users>;
  getUsersUsernameFollowers(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Users>>;
  getUsersUsernameFollowers(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowersParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Users>>;

  /**
   * Arguments object for method `getUsersUsernameFollowingTargetUser`.
   */
  getUsersUsernameFollowingTargetUserParams?: {
    /** Name of user. */
    username: string,
    /** Name of user. */
    targetUser: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * Check if one user follows another.
   * Response generated for [ 204 ] HTTP response code.
   */
  getUsersUsernameFollowingTargetUser(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowingTargetUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameFollowingTargetUser(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowingTargetUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameFollowingTargetUser(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameFollowingTargetUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getUsersUsernameGists`.
   */
  getUsersUsernameGistsParams?: {
    /** Name of user. */
    username: string,
    /**
     * The time should be passed in as UTC in the ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     * Example: "2012-10-09T23:39:01Z".
     * 
     */
    since?: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List a users gists.
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersUsernameGists(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameGistsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Gists>;
  getUsersUsernameGists(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameGistsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Gists>>;
  getUsersUsernameGists(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameGistsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Gists>>;

  /**
   * Arguments object for method `getUsersUsernameKeys`.
   */
  getUsersUsernameKeysParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List public keys for a user.
   * Lists the verified public keys for a user. This is accessible by anyone.
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersUsernameKeys(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Gitignore>;
  getUsersUsernameKeys(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Gitignore>>;
  getUsersUsernameKeys(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameKeysParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Gitignore>>;

  /**
   * Arguments object for method `getUsersUsernameOrgs`.
   */
  getUsersUsernameOrgsParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List all public organizations for a user.
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersUsernameOrgs(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameOrgsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Gitignore>;
  getUsersUsernameOrgs(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameOrgsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Gitignore>>;
  getUsersUsernameOrgs(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameOrgsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Gitignore>>;

  /**
   * Arguments object for method `getUsersUsernameReceivedEvents`.
   */
  getUsersUsernameReceivedEventsParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * These are events that you'll only see public events.
   * Response generated for [ default ] HTTP response code.
   */
  getUsersUsernameReceivedEvents(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReceivedEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameReceivedEvents(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReceivedEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameReceivedEvents(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReceivedEventsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getUsersUsernameReceivedEventsPublic`.
   */
  getUsersUsernameReceivedEventsPublicParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List public events that a user has received
   * Response generated for [ default ] HTTP response code.
   */
  getUsersUsernameReceivedEventsPublic(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReceivedEventsPublicParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameReceivedEventsPublic(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReceivedEventsPublicParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameReceivedEventsPublic(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReceivedEventsPublicParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getUsersUsernameRepos`.
   */
  getUsersUsernameReposParams?: {
    /** Name of user. */
    username: string,
    /** If not set, server will use the default value: all */
    type?: ('all' | 'public' | 'private' | 'forks' | 'sources' | 'member'),
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List public repositories for the specified user.
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersUsernameRepos(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Repos>;
  getUsersUsernameRepos(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Repos>>;
  getUsersUsernameRepos(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameReposParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Repos>>;

  /**
   * Arguments object for method `getUsersUsernameStarred`.
   */
  getUsersUsernameStarredParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List repositories being starred by a user.
   * Response generated for [ default ] HTTP response code.
   */
  getUsersUsernameStarred(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameStarredParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameStarred(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameStarredParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameStarred(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameStarredParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

  /**
   * Arguments object for method `getUsersUsernameSubscriptions`.
   */
  getUsersUsernameSubscriptionsParams?: {
    /** Name of user. */
    username: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List repositories being watched by a user.
   * Response generated for [ default ] HTTP response code.
   */
  getUsersUsernameSubscriptions(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameSubscriptionsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  getUsersUsernameSubscriptions(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameSubscriptionsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  getUsersUsernameSubscriptions(
    args: Exclude<UsersAPIClientInterface['getUsersUsernameSubscriptionsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;

}
