/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';import { HttpOptions } from '../../types';

import * as models from '../../models';
export interface IssuesAPIClientInterface {
  /**
   * Arguments object for method `getIssues`.
   */
  getIssuesParams?: {
    /**
     * Issues assigned to you / created by you / mentioning you / you're
     * subscribed to updates for / All issues the authenticated user can see
     * 
     * If not set, server will use the default value: all
     */
    filter: ('assigned' | 'created' | 'mentioned' | 'subscribed' | 'all'),
    /** If not set, server will use the default value: open */
    state: ('open' | 'closed'),
    /** String list of comma separated Label names. Example - bug,ui,@high. */
    labels: string,
    /** If not set, server will use the default value: created */
    sort: ('created' | 'updated' | 'comments'),
    /** If not set, server will use the default value: desc */
    direction: ('asc' | 'desc'),
    /**
     * Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     * Only issues updated at or after this time are returned.
     * 
     */
    since?: string,
    /**
     * You can check the current version of media type in responses.
     * 
     */
    xGitHubMediaType?: string,
    /** Is used to set specified media type. */
    accept?: string,
    xRateLimit?: number,
    xRateLimitRemaining?: number,
    xRateLimitReset?: number,
    xGitHubRequestId?: number,
  };

  /**
   * List issues.
   * List all issues across all the authenticated user's visible repositories.
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getIssues(
    args: Exclude<IssuesAPIClientInterface['getIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Issues>;
  getIssues(
    args: Exclude<IssuesAPIClientInterface['getIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Issues>>;
  getIssues(
    args: Exclude<IssuesAPIClientInterface['getIssuesParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Issues>>;

}
