/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { APIClientInterface } from './api-client.interface';
import { Observable } from 'rxjs';import { DefaultHttpOptions, HttpOptions } from './types';

import * as models from './models';
export const USE_DOMAIN = new InjectionToken<string>('APIClient_USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('APIClient_USE_HTTP_OPTIONS');

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};

@Injectable()
export class APIClient implements APIClientInterface {

  readonly options: APIHttpOptions;

  readonly domain: string = `https://petstore.swagger.io/v2`;

  constructor(
    private readonly http: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
    if (domain != null) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(options && options.headers ? options.headers : {}),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress ? { reportProgress: options.reportProgress } : {}),
      ...(options && options.withCredentials ? { withCredentials: options.withCredentials } : {})
    };
  }

  /**
   * Returns a single pet
   * Response generated for [ 200 ] HTTP response code.
   */
  getPetById(
    args: Exclude<APIClientInterface['getPetByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Pet>;
  getPetById(
    args: Exclude<APIClientInterface['getPetByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Pet>>;
  getPetById(
    args: Exclude<APIClientInterface['getPetByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Pet>>;
  getPetById(
    args: Exclude<APIClientInterface['getPetByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Pet | HttpResponse<models.Pet> | HttpEvent<models.Pet>> {
    const path = `/pet/${args.petId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Pet>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  updatePetWithForm(
    args: Exclude<APIClientInterface['updatePetWithFormParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  updatePetWithForm(
    args: Exclude<APIClientInterface['updatePetWithFormParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  updatePetWithForm(
    args: Exclude<APIClientInterface['updatePetWithFormParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  updatePetWithForm(
    args: Exclude<APIClientInterface['updatePetWithFormParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/pet/${args.petId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    const formData = new FormData();
    if (args.name != undefined) {
      formData.append('name', args.name);
    }
    if (args.status != undefined) {
      formData.append('status', args.status);
    }

    return this.http.post<void>(`${this.domain}${path}`, formData, options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  deletePet(
    args: Exclude<APIClientInterface['deletePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deletePet(
    args: Exclude<APIClientInterface['deletePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deletePet(
    args: Exclude<APIClientInterface['deletePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deletePet(
    args: Exclude<APIClientInterface['deletePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/pet/${args.petId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('apiKey' in args) {
      options.headers = options.headers.set('api_key', String(args.apiKey));
    }
    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ApiResponse>;
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ApiResponse>>;
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ApiResponse>>;
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.ApiResponse | HttpResponse<models.ApiResponse> | HttpEvent<models.ApiResponse>> {
    const path = `/pet/${args.petId}/uploadImage`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    const formData = new FormData();
    if (args.additionalMetadata != undefined) {
      formData.append('additionalMetadata', args.additionalMetadata);
    }
    if (args.file != undefined) {
      formData.append('file', args.file);
    }

    return this.http.post<models.ApiResponse>(`${this.domain}${path}`, formData, options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  addPet(
    args: Exclude<APIClientInterface['addPetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  addPet(
    args: Exclude<APIClientInterface['addPetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  addPet(
    args: Exclude<APIClientInterface['addPetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  addPet(
    args: Exclude<APIClientInterface['addPetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/pet`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  updatePet(
    args: Exclude<APIClientInterface['updatePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  updatePet(
    args: Exclude<APIClientInterface['updatePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  updatePet(
    args: Exclude<APIClientInterface['updatePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  updatePet(
    args: Exclude<APIClientInterface['updatePetParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/pet`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Multiple status values can be provided with comma separated strings
   * Response generated for [ 200 ] HTTP response code.
   */
  findPetsByStatus(
    args: Exclude<APIClientInterface['findPetsByStatusParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Pet[]>;
  findPetsByStatus(
    args: Exclude<APIClientInterface['findPetsByStatusParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Pet[]>>;
  findPetsByStatus(
    args: Exclude<APIClientInterface['findPetsByStatusParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Pet[]>>;
  findPetsByStatus(
    args: Exclude<APIClientInterface['findPetsByStatusParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Pet[] | HttpResponse<models.Pet[]> | HttpEvent<models.Pet[]>> {
    const path = `/pet/findByStatus`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('status' in args) {
      options.params = options.params.set('status', String(args.status));
    }
    return this.http.get<models.Pet[]>(`${this.domain}${path}`, options);
  }

  /**
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @deprecated this method has been deprecated and may be removed in future.
   * Response generated for [ 200 ] HTTP response code.
   */
  findPetsByTags(
    args: Exclude<APIClientInterface['findPetsByTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Pet[]>;
  findPetsByTags(
    args: Exclude<APIClientInterface['findPetsByTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Pet[]>>;
  findPetsByTags(
    args: Exclude<APIClientInterface['findPetsByTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Pet[]>>;
  findPetsByTags(
    args: Exclude<APIClientInterface['findPetsByTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Pet[] | HttpResponse<models.Pet[]> | HttpEvent<models.Pet[]>> {
    const path = `/pet/findByTags`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('tags' in args) {
      options.params = options.params.set('tags', String(args.tags));
    }
    return this.http.get<models.Pet[]>(`${this.domain}${path}`, options);
  }

  /**
   * Returns a map of status codes to quantities
   * Response generated for [ 200 ] HTTP response code.
   */
  getInventory(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<{ [key: string]: number }>;
  getInventory(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<{ [key: string]: number }>>;
  getInventory(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<{ [key: string]: number }>>;
  getInventory(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<{ [key: string]: number } | HttpResponse<{ [key: string]: number }> | HttpEvent<{ [key: string]: number }>> {
    const path = `/store/inventory`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<{ [key: string]: number }>(`${this.domain}${path}`, options);
  }

  /**
   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
   * Response generated for [ 200 ] HTTP response code.
   */
  getOrderById(
    args: Exclude<APIClientInterface['getOrderByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Order>;
  getOrderById(
    args: Exclude<APIClientInterface['getOrderByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Order>>;
  getOrderById(
    args: Exclude<APIClientInterface['getOrderByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Order>>;
  getOrderById(
    args: Exclude<APIClientInterface['getOrderByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Order | HttpResponse<models.Order> | HttpEvent<models.Order>> {
    const path = `/store/order/${args.orderId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Order>(`${this.domain}${path}`, options);
  }

  /**
   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * Response generated for [ default ] HTTP response code.
   */
  deleteOrder(
    args: Exclude<APIClientInterface['deleteOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteOrder(
    args: Exclude<APIClientInterface['deleteOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteOrder(
    args: Exclude<APIClientInterface['deleteOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deleteOrder(
    args: Exclude<APIClientInterface['deleteOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/store/order/${args.orderId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  placeOrder(
    args: Exclude<APIClientInterface['placeOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Order>;
  placeOrder(
    args: Exclude<APIClientInterface['placeOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Order>>;
  placeOrder(
    args: Exclude<APIClientInterface['placeOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Order>>;
  placeOrder(
    args: Exclude<APIClientInterface['placeOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Order | HttpResponse<models.Order> | HttpEvent<models.Order>> {
    const path = `/store/order`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<models.Order>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getUserByName(
    args: Exclude<APIClientInterface['getUserByNameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.User>;
  getUserByName(
    args: Exclude<APIClientInterface['getUserByNameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.User>>;
  getUserByName(
    args: Exclude<APIClientInterface['getUserByNameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.User>>;
  getUserByName(
    args: Exclude<APIClientInterface['getUserByNameParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.User | HttpResponse<models.User> | HttpEvent<models.User>> {
    const path = `/user/${args.username}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.User>(`${this.domain}${path}`, options);
  }

  /**
   * This can only be done by the logged in user.
   * Response generated for [ default ] HTTP response code.
   */
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/user/${args.username}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * This can only be done by the logged in user.
   * Response generated for [ default ] HTTP response code.
   */
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/user/${args.username}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  loginUser(
    args: Exclude<APIClientInterface['loginUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<string>;
  loginUser(
    args: Exclude<APIClientInterface['loginUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<string>>;
  loginUser(
    args: Exclude<APIClientInterface['loginUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<string>>;
  loginUser(
    args: Exclude<APIClientInterface['loginUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<string | HttpResponse<string> | HttpEvent<string>> {
    const path = `/user/login`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('username' in args) {
      options.params = options.params.set('username', String(args.username));
    }
    if ('password' in args) {
      options.params = options.params.set('password', String(args.password));
    }
    return this.http.get<string>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  logoutUser(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  logoutUser(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  logoutUser(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  logoutUser(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/user/logout`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<void>(`${this.domain}${path}`, options);
  }

  /**
   * This can only be done by the logged in user.
   * Response generated for [ default ] HTTP response code.
   */
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/user`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  createUsersWithArrayInput(
    args: Exclude<APIClientInterface['createUsersWithArrayInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  createUsersWithArrayInput(
    args: Exclude<APIClientInterface['createUsersWithArrayInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  createUsersWithArrayInput(
    args: Exclude<APIClientInterface['createUsersWithArrayInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  createUsersWithArrayInput(
    args: Exclude<APIClientInterface['createUsersWithArrayInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/user/createWithArray`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ default ] HTTP response code.
   */
  createUsersWithListInput(
    args: Exclude<APIClientInterface['createUsersWithListInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  createUsersWithListInput(
    args: Exclude<APIClientInterface['createUsersWithListInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  createUsersWithListInput(
    args: Exclude<APIClientInterface['createUsersWithListInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  createUsersWithListInput(
    args: Exclude<APIClientInterface['createUsersWithListInputParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/user/createWithList`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

}
