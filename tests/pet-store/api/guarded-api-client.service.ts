/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from './types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, APIClient } from './api-client.service';
import { APIClientInterface } from './api-client.interface';

import * as models from './models';
import * as guards from './guards';

@Injectable()
export class GuardedAPIClient extends APIClient implements APIClientInterface {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

  getPetById(
    args: Exclude<APIClientInterface['getPetByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Pet> {
    return super.getPetById(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isPet(res) || console.error(`TypeGuard for response 'models.Pet' caught inconsistency.`, res)));
  }

  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.ApiResponse> {
    return super.uploadFile(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isApiResponse(res) || console.error(`TypeGuard for response 'models.ApiResponse' caught inconsistency.`, res)));
  }

  findPetsByStatus(
    args: Exclude<APIClientInterface['findPetsByStatusParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Pet[]> {
    return super.findPetsByStatus(args, requestHttpOptions)
      .pipe(tap((res: any) => ( Array.isArray(res) && res.every((item: any) => guards.isPet(item)) ) || console.error(`TypeGuard for response 'models.Pet[]' caught inconsistency.`, res)));
  }

  findPetsByTags(
    args: Exclude<APIClientInterface['findPetsByTagsParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Pet[]> {
    return super.findPetsByTags(args, requestHttpOptions)
      .pipe(tap((res: any) => ( Array.isArray(res) && res.every((item: any) => guards.isPet(item)) ) || console.error(`TypeGuard for response 'models.Pet[]' caught inconsistency.`, res)));
  }

  getInventory(
    requestHttpOptions?: HttpOptions
  ): Observable<{ [key: string]: number }> {
    return super.getInventory(requestHttpOptions)
      .pipe(tap((res: any) => Object.values(res).every((value: any) => typeof value === 'number') || console.error(`TypeGuard for response '{ [key: string]: number }' caught inconsistency.`, res)));
  }

  getOrderById(
    args: Exclude<APIClientInterface['getOrderByIdParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Order> {
    return super.getOrderById(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isOrder(res) || console.error(`TypeGuard for response 'models.Order' caught inconsistency.`, res)));
  }

  placeOrder(
    args: Exclude<APIClientInterface['placeOrderParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.Order> {
    return super.placeOrder(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isOrder(res) || console.error(`TypeGuard for response 'models.Order' caught inconsistency.`, res)));
  }

  getUserByName(
    args: Exclude<APIClientInterface['getUserByNameParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<models.User> {
    return super.getUserByName(args, requestHttpOptions)
      .pipe(tap((res: any) => guards.isUser(res) || console.error(`TypeGuard for response 'models.User' caught inconsistency.`, res)));
  }

  loginUser(
    args: Exclude<APIClientInterface['loginUserParams'], undefined>,
    requestHttpOptions?: HttpOptions
  ): Observable<string> {
    return super.loginUser(args, requestHttpOptions)
      .pipe(tap((res: any) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
  }

}
