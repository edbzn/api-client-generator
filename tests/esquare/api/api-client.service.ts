/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { APIClientInterface } from './api-client.interface';
import { Observable } from 'rxjs';import { DefaultHttpOptions, HttpOptions } from './types';

import * as models from './models';
export const USE_DOMAIN = new InjectionToken<string>('APIClient_USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('APIClient_USE_HTTP_OPTIONS');

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};

@Injectable()
export class APIClient implements APIClientInterface {

  readonly options: APIHttpOptions;

  readonly domain: string = `https://virtserver.swaggerhub.com/Esquare/EsquareAPI/1.0.0`;

  constructor(
    private readonly http: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
    if (domain != null) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(options && options.headers ? options.headers : {}),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress ? { reportProgress: options.reportProgress } : {}),
      ...(options && options.withCredentials ? { withCredentials: options.withCredentials } : {})
    };
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  auth(
    args: Exclude<APIClientInterface['authParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  auth(
    args: Exclude<APIClientInterface['authParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  auth(
    args: Exclude<APIClientInterface['authParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  auth(
    args: Exclude<APIClientInterface['authParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/auth`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<object>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  authRef(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  authRef(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  authRef(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  authRef(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/auth/refresh`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<object>(`${this.domain}${path}`, null, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  passwordRestoreRequest(
    args: Exclude<APIClientInterface['passwordRestoreRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  passwordRestoreRequest(
    args: Exclude<APIClientInterface['passwordRestoreRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  passwordRestoreRequest(
    args: Exclude<APIClientInterface['passwordRestoreRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  passwordRestoreRequest(
    args: Exclude<APIClientInterface['passwordRestoreRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/restore`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<object>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  passwordRestoreEmailRequest(
    args: Exclude<APIClientInterface['passwordRestoreEmailRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  passwordRestoreEmailRequest(
    args: Exclude<APIClientInterface['passwordRestoreEmailRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  passwordRestoreEmailRequest(
    args: Exclude<APIClientInterface['passwordRestoreEmailRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  passwordRestoreEmailRequest(
    args: Exclude<APIClientInterface['passwordRestoreEmailRequestParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/restore/request`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<object>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  passwordRestoreCheckRestoreGuid(
    args: Exclude<APIClientInterface['passwordRestoreCheckRestoreGuidParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  passwordRestoreCheckRestoreGuid(
    args: Exclude<APIClientInterface['passwordRestoreCheckRestoreGuidParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  passwordRestoreCheckRestoreGuid(
    args: Exclude<APIClientInterface['passwordRestoreCheckRestoreGuidParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  passwordRestoreCheckRestoreGuid(
    args: Exclude<APIClientInterface['passwordRestoreCheckRestoreGuidParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/restore/checkGuid`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    const formData = new FormData();
    if (args.restoreGuid != undefined) {
      formData.append('restoreGuid', args.restoreGuid);
    }

    return this.http.post<object>(`${this.domain}${path}`, formData, options);
  }

  /**
   * Get list of roles to permissions mapping
   * Response generated for [ 200 ] HTTP response code.
   */
  getAclList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.AclItem[]>;
  getAclList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.AclItem[]>>;
  getAclList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.AclItem[]>>;
  getAclList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.AclItem[] | HttpResponse<models.AclItem[]> | HttpEvent<models.AclItem[]>> {
    const path = `/acl`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.AclItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Get structure entities list
   * Response generated for [ 200 ] HTTP response code.
   */
  getStructureEntitiesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Structure[]>;
  getStructureEntitiesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Structure[]>>;
  getStructureEntitiesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Structure[]>>;
  getStructureEntitiesList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Structure[] | HttpResponse<models.Structure[]> | HttpEvent<models.Structure[]>> {
    const path = `/structure`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Structure[]>(`${this.domain}${path}`, options);
  }

  /**
   * Add a new structure entity
   * Response generated for [ 200 ] HTTP response code.
   */
  addStructureEntity(
    args: Exclude<APIClientInterface['addStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Structure>;
  addStructureEntity(
    args: Exclude<APIClientInterface['addStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Structure>>;
  addStructureEntity(
    args: Exclude<APIClientInterface['addStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Structure>>;
  addStructureEntity(
    args: Exclude<APIClientInterface['addStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Structure | HttpResponse<models.Structure> | HttpEvent<models.Structure>> {
    const path = `/structure`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<models.Structure>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Update an existing structure entity
   * Response generated for [ 200 ] HTTP response code.
   */
  updateStructureEntity(
    args: Exclude<APIClientInterface['updateStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Structure>;
  updateStructureEntity(
    args: Exclude<APIClientInterface['updateStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Structure>>;
  updateStructureEntity(
    args: Exclude<APIClientInterface['updateStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Structure>>;
  updateStructureEntity(
    args: Exclude<APIClientInterface['updateStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Structure | HttpResponse<models.Structure> | HttpEvent<models.Structure>> {
    const path = `/structure/${args.structureId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<models.Structure>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Deletes a structure entity
   * Response generated for [ 200 ] HTTP response code.
   */
  deleteStructureEntity(
    args: Exclude<APIClientInterface['deleteStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteStructureEntity(
    args: Exclude<APIClientInterface['deleteStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteStructureEntity(
    args: Exclude<APIClientInterface['deleteStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deleteStructureEntity(
    args: Exclude<APIClientInterface['deleteStructureEntityParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/structure/${args.structureId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Get reports list
   * [Screenshot from design](http://prntscr.com/hy4z8d)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getReportsList(
    args: Exclude<APIClientInterface['getReportsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getReportsList(
    args: Exclude<APIClientInterface['getReportsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getReportsList(
    args: Exclude<APIClientInterface['getReportsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getReportsList(
    args: Exclude<APIClientInterface['getReportsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/report`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('status' in args) {
      options.params = options.params.set('status', String(args.status));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get report details
   * [Screenshot from design](http://prntscr.com/hywkd5)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getReportDetails(
    args: Exclude<APIClientInterface['getReportDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ReportItem[]>;
  getReportDetails(
    args: Exclude<APIClientInterface['getReportDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ReportItem[]>>;
  getReportDetails(
    args: Exclude<APIClientInterface['getReportDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ReportItem[]>>;
  getReportDetails(
    args: Exclude<APIClientInterface['getReportDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.ReportItem[] | HttpResponse<models.ReportItem[]> | HttpEvent<models.ReportItem[]>> {
    const path = `/report/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.ReportItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Get report preview
   * [Screenshot from design](http://prntscr.com/i3z8zb)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getReportPreview(
    args: Exclude<APIClientInterface['getReportPreviewParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getReportPreview(
    args: Exclude<APIClientInterface['getReportPreviewParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getReportPreview(
    args: Exclude<APIClientInterface['getReportPreviewParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getReportPreview(
    args: Exclude<APIClientInterface['getReportPreviewParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/report/preview/${args.templateId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get import history
   * [Screenshot from design](http://prntscr.com/i3ym4j)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getImportHistory(
    args: Exclude<APIClientInterface['getImportHistoryParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ImportHistoryItem[]>;
  getImportHistory(
    args: Exclude<APIClientInterface['getImportHistoryParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ImportHistoryItem[]>>;
  getImportHistory(
    args: Exclude<APIClientInterface['getImportHistoryParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ImportHistoryItem[]>>;
  getImportHistory(
    args: Exclude<APIClientInterface['getImportHistoryParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.ImportHistoryItem[] | HttpResponse<models.ImportHistoryItem[]> | HttpEvent<models.ImportHistoryItem[]>> {
    const path = `/report/history/${args.templateId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.ImportHistoryItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Upload a completed template
   * [Screenshot from design](http://prntscr.com/hy521p)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<number>;
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<number>>;
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<number>>;
  uploadFile(
    args: Exclude<APIClientInterface['uploadFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<number | HttpResponse<number> | HttpEvent<number>> {
    const path = `/report/wizard/uploadfile/${args.templateId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    const formData = new FormData();
    if (args.file != undefined) {
      formData.append('file', args.file);
    }

    return this.http.post<number>(`${this.domain}${path}`, formData, options);
  }

  /**
   * Get list of current Import template columns
   * [Screenshot from design](http://prntscr.com/hy52hi)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  listTemplateColumns(
    args: Exclude<APIClientInterface['listTemplateColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Column[]>;
  listTemplateColumns(
    args: Exclude<APIClientInterface['listTemplateColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Column[]>>;
  listTemplateColumns(
    args: Exclude<APIClientInterface['listTemplateColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Column[]>>;
  listTemplateColumns(
    args: Exclude<APIClientInterface['listTemplateColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Column[] | HttpResponse<models.Column[]> | HttpEvent<models.Column[]>> {
    const path = `/report/wizard/${args.templateId}/templateColumns`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Column[]>(`${this.domain}${path}`, options);
  }

  /**
   * Get list of current Import template columns
   * [Screenshot from design](http://prntscr.com/hy52zr)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  listReportColumns(
    args: Exclude<APIClientInterface['listReportColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Column[]>;
  listReportColumns(
    args: Exclude<APIClientInterface['listReportColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Column[]>>;
  listReportColumns(
    args: Exclude<APIClientInterface['listReportColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Column[]>>;
  listReportColumns(
    args: Exclude<APIClientInterface['listReportColumnsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Column[] | HttpResponse<models.Column[]> | HttpEvent<models.Column[]>> {
    const path = `/report/wizard/${args.id}/reportColumns`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Column[]>(`${this.domain}${path}`, options);
  }

  /**
   * Save columns mapping
   * [Screenshot from design](http://prntscr.com/hy53jt)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  saveColumnsMapping(
    args: Exclude<APIClientInterface['saveColumnsMappingParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Table>;
  saveColumnsMapping(
    args: Exclude<APIClientInterface['saveColumnsMappingParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Table>>;
  saveColumnsMapping(
    args: Exclude<APIClientInterface['saveColumnsMappingParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Table>>;
  saveColumnsMapping(
    args: Exclude<APIClientInterface['saveColumnsMappingParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Table | HttpResponse<models.Table> | HttpEvent<models.Table>> {
    const path = `/report/wizard/${args.id}/mapping`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<models.Table>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get validation table
   * [Screenshot from design](http://prntscr.com/hy5fct)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getValidationTable(
    args: Exclude<APIClientInterface['getValidationTableParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ValidatedTable>;
  getValidationTable(
    args: Exclude<APIClientInterface['getValidationTableParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ValidatedTable>>;
  getValidationTable(
    args: Exclude<APIClientInterface['getValidationTableParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ValidatedTable>>;
  getValidationTable(
    args: Exclude<APIClientInterface['getValidationTableParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.ValidatedTable | HttpResponse<models.ValidatedTable> | HttpEvent<models.ValidatedTable>> {
    const path = `/report/wizard/${args.id}/validationTable`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.ValidatedTable>(`${this.domain}${path}`, options);
  }

  /**
   * Download imported data
   * [Screenshot from design](http://prntscr.com/hy55ga)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  downloadImportedFile(
    args: Exclude<APIClientInterface['downloadImportedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  downloadImportedFile(
    args: Exclude<APIClientInterface['downloadImportedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  downloadImportedFile(
    args: Exclude<APIClientInterface['downloadImportedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  downloadImportedFile(
    args: Exclude<APIClientInterface['downloadImportedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<File | HttpResponse<File> | HttpEvent<File>> {
    const path = `/report/wizard/${args.id}/downloadImported`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
      responseType: 'blob' as 'json',
    };

    if ('all' in args) {
      options.params = options.params.set('all', String(args.all));
    }
    return this.http.get<File>(`${this.domain}${path}`, options);
  }

  /**
   * Confirm final import
   * [Screenshot from design](http://prntscr.com/hy57nj)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  importConfirmation(
    args: Exclude<APIClientInterface['importConfirmationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ImportResponse>;
  importConfirmation(
    args: Exclude<APIClientInterface['importConfirmationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ImportResponse>>;
  importConfirmation(
    args: Exclude<APIClientInterface['importConfirmationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ImportResponse>>;
  importConfirmation(
    args: Exclude<APIClientInterface['importConfirmationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.ImportResponse | HttpResponse<models.ImportResponse> | HttpEvent<models.ImportResponse>> {
    const path = `/report/wizard/${args.id}/import`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<models.ImportResponse>(`${this.domain}${path}`, null, options);
  }

  /**
   * Download original file
   * [Screenshot from design](http://prntscr.com/hy5a54)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  downloadImportOriginalFile(
    args: Exclude<APIClientInterface['downloadImportOriginalFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  downloadImportOriginalFile(
    args: Exclude<APIClientInterface['downloadImportOriginalFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  downloadImportOriginalFile(
    args: Exclude<APIClientInterface['downloadImportOriginalFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  downloadImportOriginalFile(
    args: Exclude<APIClientInterface['downloadImportOriginalFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<File | HttpResponse<File> | HttpEvent<File>> {
    const path = `/report/wizard/${args.id}/downloadOriginal`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
      responseType: 'blob' as 'json',
    };

    return this.http.get<File>(`${this.domain}${path}`, options);
  }

  /**
   * Download skipped rows file
   * [Screenshot from design](http://prntscr.com/hy5ae7)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  downloadImportSkippedFile(
    args: Exclude<APIClientInterface['downloadImportSkippedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  downloadImportSkippedFile(
    args: Exclude<APIClientInterface['downloadImportSkippedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  downloadImportSkippedFile(
    args: Exclude<APIClientInterface['downloadImportSkippedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  downloadImportSkippedFile(
    args: Exclude<APIClientInterface['downloadImportSkippedFileParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<File | HttpResponse<File> | HttpEvent<File>> {
    const path = `/report/wizard/${args.id}/downloadSkipped`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
      responseType: 'blob' as 'json',
    };

    return this.http.get<File>(`${this.domain}${path}`, options);
  }

  /**
   * Cancel current import
   * [Screenshot from design](http://prntscr.com/hy5aqq)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  cancelImport(
    args: Exclude<APIClientInterface['cancelImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  cancelImport(
    args: Exclude<APIClientInterface['cancelImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  cancelImport(
    args: Exclude<APIClientInterface['cancelImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  cancelImport(
    args: Exclude<APIClientInterface['cancelImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/report/wizard/${args.id}/cancelImport`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<void>(`${this.domain}${path}`, null, options);
  }

  /**
   * Request override data for import
   * [Screenshot from design](http://prntscr.com/hy5bi6)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  overrideImport(
    args: Exclude<APIClientInterface['overrideImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  overrideImport(
    args: Exclude<APIClientInterface['overrideImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  overrideImport(
    args: Exclude<APIClientInterface['overrideImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  overrideImport(
    args: Exclude<APIClientInterface['overrideImportParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/report/wizard/${args.id}/override`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    const formData = new FormData();
    if (args.description != undefined) {
      formData.append('description', args.description);
    }
    if (args.file != undefined) {
      formData.append('file', args.file);
    }

    return this.http.post<void>(`${this.domain}${path}`, formData, options);
  }

  /**
   * Get import stats
   * [Screenshot from design](http://prntscr.com/i4052r)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  geImportStats(
    args?: APIClientInterface['geImportStatsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.TotalImportStats>;
  geImportStats(
    args?: APIClientInterface['geImportStatsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.TotalImportStats>>;
  geImportStats(
    args?: APIClientInterface['geImportStatsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.TotalImportStats>>;
  geImportStats(
    args: APIClientInterface['geImportStatsParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.TotalImportStats | HttpResponse<models.TotalImportStats> | HttpEvent<models.TotalImportStats>> {
    const path = `/report/ministry/statistic`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('period' in args) {
      options.params = options.params.set('period', String(args.period));
    }
    return this.http.get<models.TotalImportStats>(`${this.domain}${path}`, options);
  }

  /**
   * Get issues list
   * [Screenshot from design](http://prntscr.com/i40s18)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getIssuesList(
    args: Exclude<APIClientInterface['getIssuesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getIssuesList(
    args: Exclude<APIClientInterface['getIssuesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getIssuesList(
    args: Exclude<APIClientInterface['getIssuesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getIssuesList(
    args: Exclude<APIClientInterface['getIssuesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/report/ministry/issues`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('period' in args) {
      options.params = options.params.set('period', String(args.period));
    }
    if ('status' in args) {
      options.params = options.params.set('status', String(args.status));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get import statuses list
   * [Screenshot from design](http://prntscr.com/i4byyx)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getStatusesList(
    args: Exclude<APIClientInterface['getStatusesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getStatusesList(
    args: Exclude<APIClientInterface['getStatusesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getStatusesList(
    args: Exclude<APIClientInterface['getStatusesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getStatusesList(
    args: Exclude<APIClientInterface['getStatusesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/report/ministry/statuses`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('period' in args) {
      options.params = options.params.set('period', String(args.period));
    }
    if ('status' in args) {
      options.params = options.params.set('status', String(args.status));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get users list
   * Response generated for [ 200 ] HTTP response code.
   */
  getUsersList(
    args: Exclude<APIClientInterface['getUsersListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getUsersList(
    args: Exclude<APIClientInterface['getUsersListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getUsersList(
    args: Exclude<APIClientInterface['getUsersListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getUsersList(
    args: Exclude<APIClientInterface['getUsersListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/users`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('period' in args) {
      options.params = options.params.set('period', String(args.period));
    }
    if ('status' in args) {
      options.params = options.params.set('status', String(args.status));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    if ('assignedToRole' in args) {
      options.params = options.params.set('assignedToRole', String(args.assignedToRole));
    }
    if ('unassignedFromRole' in args) {
      options.params = options.params.set('unassignedFromRole', String(args.unassignedFromRole));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Create user
   * Response generated for [ 200 ] HTTP response code.
   */
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.UserDetails>;
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.UserDetails>>;
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.UserDetails>>;
  createUser(
    args: Exclude<APIClientInterface['createUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.UserDetails | HttpResponse<models.UserDetails> | HttpEvent<models.UserDetails>> {
    const path = `/users`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<models.UserDetails>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get acl structure
   * Response generated for [ 200 ] HTTP response code.
   */
  getAclStructure(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Acl[]>;
  getAclStructure(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Acl[]>>;
  getAclStructure(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Acl[]>>;
  getAclStructure(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Acl[] | HttpResponse<models.Acl[]> | HttpEvent<models.Acl[]>> {
    const path = `/users/acl`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Acl[]>(`${this.domain}${path}`, options);
  }

  /**
   * getUserDetails
   * Response generated for [ 200 ] HTTP response code.
   */
  getUserDetails(
    args: Exclude<APIClientInterface['getUserDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.UserDetails[]>;
  getUserDetails(
    args: Exclude<APIClientInterface['getUserDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.UserDetails[]>>;
  getUserDetails(
    args: Exclude<APIClientInterface['getUserDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.UserDetails[]>>;
  getUserDetails(
    args: Exclude<APIClientInterface['getUserDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.UserDetails[] | HttpResponse<models.UserDetails[]> | HttpEvent<models.UserDetails[]>> {
    const path = `/users/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.UserDetails[]>(`${this.domain}${path}`, options);
  }

  /**
   * update user by id
   * Response generated for [ 200 ] HTTP response code.
   */
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.UserDetails>;
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.UserDetails>>;
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.UserDetails>>;
  updateUser(
    args: Exclude<APIClientInterface['updateUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.UserDetails | HttpResponse<models.UserDetails> | HttpEvent<models.UserDetails>> {
    const path = `/users/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<models.UserDetails>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * delete user by id
   * Response generated for [ 200 ] HTTP response code.
   */
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deleteUser(
    args: Exclude<APIClientInterface['deleteUserParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/users/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Get roles list
   * [Screenshot from design](http://prntscr.com/i93q0s)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getRolesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.RoleListItem[]>;
  getRolesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.RoleListItem[]>>;
  getRolesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.RoleListItem[]>>;
  getRolesList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.RoleListItem[] | HttpResponse<models.RoleListItem[]> | HttpEvent<models.RoleListItem[]>> {
    const path = `/users/roles`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.RoleListItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Create role
   * Response generated for [ 200 ] HTTP response code.
   */
  createRole(
    args: Exclude<APIClientInterface['createRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.RoleDetailsItem>;
  createRole(
    args: Exclude<APIClientInterface['createRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.RoleDetailsItem>>;
  createRole(
    args: Exclude<APIClientInterface['createRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.RoleDetailsItem>>;
  createRole(
    args: Exclude<APIClientInterface['createRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.RoleDetailsItem | HttpResponse<models.RoleDetailsItem> | HttpEvent<models.RoleDetailsItem>> {
    const path = `/users/roles`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<models.RoleDetailsItem>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get privileges list
   * [Screenshot from design](http://prntscr.com/i947a3)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.PrivilegeTreeItem[]>;
  getList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.PrivilegeTreeItem[]>>;
  getList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.PrivilegeTreeItem[]>>;
  getList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.PrivilegeTreeItem[] | HttpResponse<models.PrivilegeTreeItem[]> | HttpEvent<models.PrivilegeTreeItem[]>> {
    const path = `/users/privileges`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.PrivilegeTreeItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Get role details
   * Response generated for [ 200 ] HTTP response code.
   */
  getRoleDetails(
    args: Exclude<APIClientInterface['getRoleDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.RoleDetailsItem[]>;
  getRoleDetails(
    args: Exclude<APIClientInterface['getRoleDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.RoleDetailsItem[]>>;
  getRoleDetails(
    args: Exclude<APIClientInterface['getRoleDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.RoleDetailsItem[]>>;
  getRoleDetails(
    args: Exclude<APIClientInterface['getRoleDetailsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.RoleDetailsItem[] | HttpResponse<models.RoleDetailsItem[]> | HttpEvent<models.RoleDetailsItem[]>> {
    const path = `/users/roles/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.RoleDetailsItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Update role by id
   * Response generated for [ 200 ] HTTP response code.
   */
  updateRole(
    args: Exclude<APIClientInterface['updateRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.RoleDetailsItem>;
  updateRole(
    args: Exclude<APIClientInterface['updateRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.RoleDetailsItem>>;
  updateRole(
    args: Exclude<APIClientInterface['updateRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.RoleDetailsItem>>;
  updateRole(
    args: Exclude<APIClientInterface['updateRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.RoleDetailsItem | HttpResponse<models.RoleDetailsItem> | HttpEvent<models.RoleDetailsItem>> {
    const path = `/users/roles/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<models.RoleDetailsItem>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Ddelete role by id
   * Response generated for [ 200 ] HTTP response code.
   */
  deleteRole(
    args: Exclude<APIClientInterface['deleteRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deleteRole(
    args: Exclude<APIClientInterface['deleteRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deleteRole(
    args: Exclude<APIClientInterface['deleteRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deleteRole(
    args: Exclude<APIClientInterface['deleteRoleParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/users/roles/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Get unviewed notifications list
   * [Screenshot from design](http://prntscr.com/iba7xr)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getNewNotificationsList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.NotificationListItem[]>;
  getNewNotificationsList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.NotificationListItem[]>>;
  getNewNotificationsList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.NotificationListItem[]>>;
  getNewNotificationsList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.NotificationListItem[] | HttpResponse<models.NotificationListItem[]> | HttpEvent<models.NotificationListItem[]>> {
    const path = `/notifications/new`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.NotificationListItem[]>(`${this.domain}${path}`, options);
  }

  /**
   * Mark notifications as viewed
   * Response generated for [ 200 ] HTTP response code.
   */
  markViewedNotifications(
    args?: APIClientInterface['markViewedNotificationsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  markViewedNotifications(
    args?: APIClientInterface['markViewedNotificationsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  markViewedNotifications(
    args?: APIClientInterface['markViewedNotificationsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  markViewedNotifications(
    args: APIClientInterface['markViewedNotificationsParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/notifications/markAsViewed`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get user's notifications list
   * [Screenshot from design](http://prntscr.com/iba8tq)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getNotificationsList(
    args: Exclude<APIClientInterface['getNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getNotificationsList(
    args: Exclude<APIClientInterface['getNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getNotificationsList(
    args: Exclude<APIClientInterface['getNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getNotificationsList(
    args: Exclude<APIClientInterface['getNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/notifications/all`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get modules list
   * [Screenshot from design](http://prntscr.com/ibac47) |
   * [Screenshot from design](http://prntscr.com/ibacgu)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getModulesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.NotificationModule[]>;
  getModulesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.NotificationModule[]>>;
  getModulesList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.NotificationModule[]>>;
  getModulesList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.NotificationModule[] | HttpResponse<models.NotificationModule[]> | HttpEvent<models.NotificationModule[]>> {
    const path = `/notifications/modules`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.NotificationModule[]>(`${this.domain}${path}`, options);
  }

  /**
   * Get triggers list
   * [Screenshot from design](http://prntscr.com/ibad9m)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getTriggersList(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.NotificationTrigger[]>;
  getTriggersList(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.NotificationTrigger[]>>;
  getTriggersList(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.NotificationTrigger[]>>;
  getTriggersList(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.NotificationTrigger[] | HttpResponse<models.NotificationTrigger[]> | HttpEvent<models.NotificationTrigger[]>> {
    const path = `/notifications/triggers`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.NotificationTrigger[]>(`${this.domain}${path}`, options);
  }

  /**
   * Get module's notifications list
   * [Screenshot from design](http://prntscr.com/iba8tq)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getModuleNotificationsList(
    args: Exclude<APIClientInterface['getModuleNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getModuleNotificationsList(
    args: Exclude<APIClientInterface['getModuleNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getModuleNotificationsList(
    args: Exclude<APIClientInterface['getModuleNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getModuleNotificationsList(
    args: Exclude<APIClientInterface['getModuleNotificationsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/notifications/modules/${args.moduleId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('orderBy' in args) {
      options.params = options.params.set('orderBy', String(args.orderBy));
    }
    if ('order' in args) {
      options.params = options.params.set('order', String(args.order));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Enable notification
   * Response generated for [ 200 ] HTTP response code.
   */
  enableNotification(
    args: Exclude<APIClientInterface['enableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  enableNotification(
    args: Exclude<APIClientInterface['enableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  enableNotification(
    args: Exclude<APIClientInterface['enableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  enableNotification(
    args: Exclude<APIClientInterface['enableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/notifications/enable/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<void>(`${this.domain}${path}`, null, options);
  }

  /**
   * Disable notification
   * Response generated for [ 200 ] HTTP response code.
   */
  disableNotification(
    args: Exclude<APIClientInterface['disableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  disableNotification(
    args: Exclude<APIClientInterface['disableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  disableNotification(
    args: Exclude<APIClientInterface['disableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  disableNotification(
    args: Exclude<APIClientInterface['disableNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/notifications/disable/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<void>(`${this.domain}${path}`, null, options);
  }

  /**
   * Get notification details
   * Response generated for [ 200 ] HTTP response code.
   */
  getNotification(
    args: Exclude<APIClientInterface['getNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.NotificationEditableListItem>;
  getNotification(
    args: Exclude<APIClientInterface['getNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.NotificationEditableListItem>>;
  getNotification(
    args: Exclude<APIClientInterface['getNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.NotificationEditableListItem>>;
  getNotification(
    args: Exclude<APIClientInterface['getNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.NotificationEditableListItem | HttpResponse<models.NotificationEditableListItem> | HttpEvent<models.NotificationEditableListItem>> {
    const path = `/notifications/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.NotificationEditableListItem>(`${this.domain}${path}`, options);
  }

  /**
   * Update notification
   * Response generated for [ 200 ] HTTP response code.
   */
  updateNotification(
    args: Exclude<APIClientInterface['updateNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  updateNotification(
    args: Exclude<APIClientInterface['updateNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  updateNotification(
    args: Exclude<APIClientInterface['updateNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  updateNotification(
    args: Exclude<APIClientInterface['updateNotificationParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/notifications/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Create notification
   * Response generated for [ 200 ] HTTP response code.
   */
  createNotification(
    args?: APIClientInterface['createNotificationParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<number>;
  createNotification(
    args?: APIClientInterface['createNotificationParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<number>>;
  createNotification(
    args?: APIClientInterface['createNotificationParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<number>>;
  createNotification(
    args: APIClientInterface['createNotificationParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<number | HttpResponse<number> | HttpEvent<number>> {
    const path = `/notifications`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.post<number>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get password verefication settings
   * [Screenshot from design](http://prntscr.com/ijzt2b)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getPassVerificationPolicies(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.PasswordVerificationPolicies>;
  getPassVerificationPolicies(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.PasswordVerificationPolicies>>;
  getPassVerificationPolicies(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.PasswordVerificationPolicies>>;
  getPassVerificationPolicies(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.PasswordVerificationPolicies | HttpResponse<models.PasswordVerificationPolicies> | HttpEvent<models.PasswordVerificationPolicies>> {
    const path = `/security-policy/password-verification`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.PasswordVerificationPolicies>(`${this.domain}${path}`, options);
  }

  /**
   * Update password verefication settings
   * [Screenshot from design](http://prntscr.com/ijzt2b)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  udatePassVerificationPolicies(
    args?: APIClientInterface['udatePassVerificationPoliciesParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.PasswordVerificationPolicies>;
  udatePassVerificationPolicies(
    args?: APIClientInterface['udatePassVerificationPoliciesParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.PasswordVerificationPolicies>>;
  udatePassVerificationPolicies(
    args?: APIClientInterface['udatePassVerificationPoliciesParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.PasswordVerificationPolicies>>;
  udatePassVerificationPolicies(
    args: APIClientInterface['udatePassVerificationPoliciesParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.PasswordVerificationPolicies | HttpResponse<models.PasswordVerificationPolicies> | HttpEvent<models.PasswordVerificationPolicies>> {
    const path = `/security-policy/password-verification`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<models.PasswordVerificationPolicies>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get password creation settings
   * [Screenshot from design](http://prntscr.com/ijzuv3)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getPassCreationPolicies(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.PasswordCreationPolicies>;
  getPassCreationPolicies(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.PasswordCreationPolicies>>;
  getPassCreationPolicies(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.PasswordCreationPolicies>>;
  getPassCreationPolicies(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.PasswordCreationPolicies | HttpResponse<models.PasswordCreationPolicies> | HttpEvent<models.PasswordCreationPolicies>> {
    const path = `/security-policy/password-creation`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.PasswordCreationPolicies>(`${this.domain}${path}`, options);
  }

  /**
   * Update password creation settings
   * [Screenshot from design](http://prntscr.com/ijzuv3)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  udatePassCreationPolicies(
    args?: APIClientInterface['udatePassCreationPoliciesParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.PasswordCreationPolicies>;
  udatePassCreationPolicies(
    args?: APIClientInterface['udatePassCreationPoliciesParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.PasswordCreationPolicies>>;
  udatePassCreationPolicies(
    args?: APIClientInterface['udatePassCreationPoliciesParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.PasswordCreationPolicies>>;
  udatePassCreationPolicies(
    args: APIClientInterface['udatePassCreationPoliciesParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.PasswordCreationPolicies | HttpResponse<models.PasswordCreationPolicies> | HttpEvent<models.PasswordCreationPolicies>> {
    const path = `/security-policy/password-creation`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<models.PasswordCreationPolicies>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get other security settings settings
   * [Screenshot from design](http://prntscr.com/ijzvo3)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  getOtherSecuritySettings(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.OtherSecuritySettings>;
  getOtherSecuritySettings(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.OtherSecuritySettings>>;
  getOtherSecuritySettings(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.OtherSecuritySettings>>;
  getOtherSecuritySettings(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.OtherSecuritySettings | HttpResponse<models.OtherSecuritySettings> | HttpEvent<models.OtherSecuritySettings>> {
    const path = `/security-policy/other-settings`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.OtherSecuritySettings>(`${this.domain}${path}`, options);
  }

  /**
   * Update other security settings settings
   * [Screenshot from design](http://prntscr.com/ijzvo3)
   * 
   * Response generated for [ 200 ] HTTP response code.
   */
  udateOtherSecuritySettings(
    args?: APIClientInterface['udateOtherSecuritySettingsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.OtherSecuritySettings>;
  udateOtherSecuritySettings(
    args?: APIClientInterface['udateOtherSecuritySettingsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.OtherSecuritySettings>>;
  udateOtherSecuritySettings(
    args?: APIClientInterface['udateOtherSecuritySettingsParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.OtherSecuritySettings>>;
  udateOtherSecuritySettings(
    args: APIClientInterface['udateOtherSecuritySettingsParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.OtherSecuritySettings | HttpResponse<models.OtherSecuritySettings> | HttpEvent<models.OtherSecuritySettings>> {
    const path = `/security-policy/other-settings`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<models.OtherSecuritySettings>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

}
