/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import {
  CollectionSelector,
  Cursor,
  Filter,
  Order,
  Projection,
} from '.';

/**
 * A Firestore query.
 */
export interface StructuredQuery {
  /** A end point for the query results. */
  endAt?: Cursor;
  /** The collections to query. */
  from?: CollectionSelector[];
  /** The maximum number of results to return.Applies after all other constraints.Must be >= 0 if specified. */
  limit?: number;
  /** The number of results to skip.Applies before limit, but after all other constraints. Must be >= 0 ifspecified. */
  offset?: number;
  /** The order to apply to the query results.Firestore guarantees a stable ordering through the following rules: * Any field required to appear in `order_by`, that is not already   specified in `order_by`, is appended to the order in field nameorder   by default. * If an order on `__name__` is not specified, it is appended bydefault.Fields are appended with the same sort direction as the last orderspecified, or 'ASCENDING' if no order was specified. For example: * `SELECT * FROM Foo ORDER BY A` becomes   `SELECT * FROM Foo ORDER BY A, __name__` * `SELECT * FROM Foo ORDER BY A DESC` becomes   `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC` * `SELECT * FROM Foo WHERE A > 1` becomes   `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__` */
  orderBy?: Order[];
  /** The projection to return. */
  select?: Projection;
  /** A starting point for the query results. */
  startAt?: Cursor;
  /** The filter to apply. */
  where?: Filter;
}
