/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';import { HttpOptions } from './types';

import * as models from './models';
export interface APIClientInterface {
  /**
   * Arguments object for method `getItems`.
   */
  getItemsParams?: {
    pageSize: number,
    /**  page number */
    page: number,
  };

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ItemList>;
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ItemList>>;
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ItemList>>;
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<models.ItemList | HttpResponse<models.ItemList> | HttpEvent<models.ItemList>>;

  /**
   * Arguments object for method `getItemModels`.
   */
  getItemModelsParams?: {
    pageSize: number,
    /**  page number */
    page: number,
  };

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<object | HttpResponse<object> | HttpEvent<object>>;

  /**
   * Arguments object for method `getPetsId`.
   */
  getPetsIdParams?: {
    id: string,
  };

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Pet[]>;
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Pet[]>>;
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Pet[]>>;
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<models.Pet[] | HttpResponse<models.Pet[]> | HttpEvent<models.Pet[]>>;

  /**
   * Arguments object for method `deletePetsId`.
   */
  deletePetsIdParams?: {
    id: string,
  };

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<void | HttpResponse<void> | HttpEvent<void>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<(models.Customer[]) | null>;
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<(models.Customer[]) | null>>;
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<(models.Customer[]) | null>>;
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<(models.Customer[]) | null | HttpResponse<(models.Customer[]) | null> | HttpEvent<(models.Customer[]) | null>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Dictionary>;
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Dictionary>>;
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Dictionary>>;
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<models.Dictionary | HttpResponse<models.Dictionary> | HttpEvent<models.Dictionary>>;

  /**
   * Arguments object for method `getFileId`.
   */
  getFileIdParams?: {
    id: string,
  };

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<File | HttpResponse<File> | HttpEvent<File>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<object | HttpResponse<object> | HttpEvent<object>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<object | HttpResponse<object> | HttpEvent<object>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<string>;
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<string>>;
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<string>>;
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<string | HttpResponse<string> | HttpEvent<string>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<{ [key: string]: number }>;
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<{ [key: string]: number }>>;
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<{ [key: string]: number }>>;
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<{ [key: string]: number } | HttpResponse<{ [key: string]: number }> | HttpEvent<{ [key: string]: number }>>;

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<{ [key: string]: number }[]>;
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<{ [key: string]: number }[]>>;
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<{ [key: string]: number }[]>>;
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<{ [key: string]: number }[] | HttpResponse<{ [key: string]: number }[]> | HttpEvent<{ [key: string]: number }[]>>;

  /**
   * Arguments object for method `firestoreProjectsDatabasesDocumentsCommit`.
   */
  firestoreProjectsDatabasesDocumentsCommitParams?: {
    /**  (optional) - error format - 1 V1 - 2 V2  */
    wololo?: models.NumberEnumParam,
    /**  (optional) Data format for response. */
    alt?: models.StringEnumParam,
    /**  (optional) OAuth access token. */
    accessToken?: string,
    /**  (optional) Pretty-print response. */
    pp?: boolean,
    /**  (optional) should pretty print */
    prettyPrint?: boolean,
    simpleQueryParam?: string,
    simpleArrayQueryParam?: number[],
    body?: models.Data,
    /**  The database name. In the format `database:{{name}}` */
    database: string,
  };

  /**
   * Commits a transaction, while optionally updating documents.
   * Response generated for [ 200 ] HTTP response code.
   */
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Dictionary>;
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Dictionary>>;
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Dictionary>>;
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<models.Dictionary | HttpResponse<models.Dictionary> | HttpEvent<models.Dictionary>>;

  /**
   * Arguments object for method `postReposOwnerRepoGitBlobs`.
   */
  postReposOwnerRepoGitBlobsParams?: {
    /**  Name of repository owner. */
    owner: string,
    /**  Name of repository. */
    repo: string,
    /**  (optional) Is used to set specified media type. */
    accept?: string,
    /**  Custom blob (should be imported from models) */
    body: models.Blob,
  };

  /**
   * Create a custom Blob.
   * Response generated for [ 201 ] HTTP response code.
   */
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Blob[]>;
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Blob[]>>;
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Blob[]>>;
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<models.Blob[] | HttpResponse<models.Blob[]> | HttpEvent<models.Blob[]>>;

  /**
   * Arguments object for method `getReposOwnerRepoGitBlobsShaCode`.
   */
  getReposOwnerRepoGitBlobsShaCodeParams?: {
    /**  Name of repository owner. */
    owner: string,
    /**  Name of repository. */
    repo: string,
    /**  SHA-1 code. */
    shaCode: string,
    /**  (optional) Is used to set specified media type. */
    accept?: string,
  };

  /**
   * Get standard File
   * Response generated for [ 200 ] HTTP response code.
   */
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: any,
  ): Observable<File | HttpResponse<File> | HttpEvent<File>>;

}
