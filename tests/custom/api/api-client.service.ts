/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { APIClientInterface } from './api-client.interface';
import { Observable } from 'rxjs';import { DefaultHttpOptions, HttpOptions } from './types';

import * as models from './models';
export const USE_DOMAIN = new InjectionToken<string>('APIClient_USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('APIClient_USE_HTTP_OPTIONS');

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};

@Injectable()
export class APIClient implements APIClientInterface {

  readonly options: APIHttpOptions;

  readonly domain: string = `//${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}`;

  constructor(
    private readonly http: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
    if (domain != null) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(options && options.headers ? options.headers : {}),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress ? { reportProgress: options.reportProgress } : {}),
      ...(options && options.withCredentials ? { withCredentials: options.withCredentials } : {})
    };
  }

  /**
   * Get items list
   * Response generated for [ 200 ] HTTP response code.
   */
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ItemList>;
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ItemList>>;
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ItemList>>;
  getItems(
    args: Exclude<APIClientInterface['getItemsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.ItemList | HttpResponse<models.ItemList> | HttpEvent<models.ItemList>> {
    const path = `/items`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    return this.http.get<models.ItemList>(`${this.domain}${path}`, options);
  }

  /**
   * Get item models list
   * Response generated for [ 200 ] HTTP response code.
   */
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getItemModels(
    args: Exclude<APIClientInterface['getItemModelsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/itemModels`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('pageSize' in args) {
      options.params = options.params.set('pageSize', String(args.pageSize));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Pet[]>;
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Pet[]>>;
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Pet[]>>;
  getPetsId(
    args: Exclude<APIClientInterface['getPetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Pet[] | HttpResponse<models.Pet[]> | HttpEvent<models.Pet[]>> {
    const path = `/pets/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Pet[]>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  deletePetsId(
    args: Exclude<APIClientInterface['deletePetsIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/pets/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.delete<void>(`${this.domain}${path}`, options);
  }

  /**
   * Get details of the game.
   * Default id param should be overriden to string
   * Response generated for [ 200 ] HTTP response code.
   */
  getPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['getPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Pet>;
  getPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['getPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Pet>>;
  getPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['getPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Pet>>;
  getPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['getPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Pet | HttpResponse<models.Pet> | HttpEvent<models.Pet>> {
    const path = `/pets-with-default-id-param/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Pet>(`${this.domain}${path}`, options);
  }

  /**
   * Default id param should be number and not string
   * Response generated for [ 200 ] HTTP response code.
   */
  patchPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['patchPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<void>;
  patchPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['patchPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<void>>;
  patchPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['patchPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<void>>;
  patchPetsWithDefaultIdParamId(
    args: Exclude<APIClientInterface['patchPetsWithDefaultIdParamIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<void | HttpResponse<void> | HttpEvent<void>> {
    const path = `/pets-with-default-id-param/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.patch<void>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<(models.Customer[]) | null>;
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<(models.Customer[]) | null>>;
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<(models.Customer[]) | null>>;
  getCustomers(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<(models.Customer[]) | null | HttpResponse<(models.Customer[]) | null> | HttpEvent<(models.Customer[]) | null>> {
    const path = `/customers`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<(models.Customer[]) | null>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Dictionary>;
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Dictionary>>;
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Dictionary>>;
  getDictionaries(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Dictionary | HttpResponse<models.Dictionary> | HttpEvent<models.Dictionary>> {
    const path = `/dictionaries`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Dictionary>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  getFileId(
    args: Exclude<APIClientInterface['getFileIdParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<File | HttpResponse<File> | HttpEvent<File>> {
    const path = `/file/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
      responseType: 'blob' as 'json',
    };

    return this.http.get<File>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getRandomObject(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/randomObject`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  getRandomModel(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/randomModel`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<string>;
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<string>>;
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<string>>;
  getRandomString(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<string | HttpResponse<string> | HttpEvent<string>> {
    const path = `/randomString`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<string>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<{ [key: string]: number }>;
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<{ [key: string]: number }>>;
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<{ [key: string]: number }>>;
  getDictionary(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<{ [key: string]: number } | HttpResponse<{ [key: string]: number }> | HttpEvent<{ [key: string]: number }>> {
    const path = `/store/dictionary`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<{ [key: string]: number }>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<{ [key: string]: number }[]>;
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<{ [key: string]: number }[]>>;
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<{ [key: string]: number }[]>>;
  getArrayOfDictionaries(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<{ [key: string]: number }[] | HttpResponse<{ [key: string]: number }[]> | HttpEvent<{ [key: string]: number }[]>> {
    const path = `/store/arrayOfdictionaries`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<{ [key: string]: number }[]>(`${this.domain}${path}`, options);
  }

  /**
   * Commits a transaction, while optionally updating documents.
   * Response generated for [ 200 ] HTTP response code.
   */
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Dictionary>;
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Dictionary>>;
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Dictionary>>;
  firestoreProjectsDatabasesDocumentsCommit(
    args: Exclude<APIClientInterface['firestoreProjectsDatabasesDocumentsCommitParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Dictionary | HttpResponse<models.Dictionary> | HttpEvent<models.Dictionary>> {
    const path = `/${args.database}/write`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('wololo' in args) {
      options.params = options.params.set('wololo', String(args.wololo));
    }
    if ('alt' in args) {
      options.params = options.params.set('alt', String(args.alt));
    }
    if ('accessToken' in args) {
      options.params = options.params.set('access_token', String(args.accessToken));
    }
    if ('pp' in args) {
      options.params = options.params.set('pp', String(args.pp));
    }
    if ('prettyPrint' in args) {
      options.params = options.params.set('prettyPrint', String(args.prettyPrint));
    }
    if ('simpleQueryParam' in args) {
      options.params = options.params.set('simpleQueryParam', String(args.simpleQueryParam));
    }
    if ('simpleArrayQueryParam' in args) {
      options.params = options.params.set('simpleArrayQueryParam', String(args.simpleArrayQueryParam));
    }
    return this.http.post<models.Dictionary>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Create a custom Blob.
   * Response generated for [ 201 ] HTTP response code.
   */
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Blob[]>;
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Blob[]>>;
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Blob[]>>;
  postReposOwnerRepoGitBlobs(
    args: Exclude<APIClientInterface['postReposOwnerRepoGitBlobsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.Blob[] | HttpResponse<models.Blob[]> | HttpEvent<models.Blob[]>> {
    const path = `/repos/${args.owner}/${args.repo}/git/blobs`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('accept' in args) {
      options.headers = options.headers.set('Accept', String(args.accept));
    }
    return this.http.post<models.Blob[]>(`${this.domain}${path}`, JSON.stringify(args.body), options);
  }

  /**
   * Get standard File
   * Response generated for [ 200 ] HTTP response code.
   */
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<File>;
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<File>>;
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<File>>;
  getReposOwnerRepoGitBlobsShaCode(
    args: Exclude<APIClientInterface['getReposOwnerRepoGitBlobsShaCodeParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<File | HttpResponse<File> | HttpEvent<File>> {
    const path = `/repos/${args.owner}/${args.repo}/git/blobs/${args.shaCode}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
      responseType: 'blob' as 'json',
    };

    if ('accept' in args) {
      options.headers = options.headers.set('Accept', String(args.accept));
    }
    return this.http.get<File>(`${this.domain}${path}`, options);
  }

}
