swagger: '2.0'
info:
  description: |
    Custom use cases test
  version: '1.0.0'
  title: Custom use cases test
schemes:
  - https
paths:
  /items:
    get:
      summary: Get items list
      operationId: getItems
      parameters:
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: page number
          required: true
          type: integer
          format: int32
      produces:
        - application/json
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ItemList'
  /itemModels:
    get:
      summary: Get item models list
      operationId: getItemModels
      parameters:
        - name: pageSize
          in: query
          required: true
          type: integer
          format: int32
        - name: page
          in: query
          description: page number
          required: true
          type: integer
          format: int32
      produces:
        - application/json
        - application/xml
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              total:
                type: integer
              list:
                type: array
                items:
                  $ref: '#/definitions/ItemModelList'
  /pets/{id}:
    parameters:
      - in: path
        name: id
        type: string
        required: true
    get:
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
    delete:
      responses:
        200:
          description: OK
  #  # an example of overriding parameter from RAWGÂ API
  #  '/games/{id}':
  #    get:
  #      description: ''
  #      operationId: games_read
  #      parameters:
  #        - description: An ID or a slug identifying this Game.
  #          in: path
  #          name: id
  #          required: true
  #          type: string
  #      responses:
  #        '200':
  #          description: ''
  #          schema:
  #            $ref: '#/definitions/Pet'
  #      summary: Get details of the game.
  #      tags:
  #        - games
  #    parameters:
  #      - description: A unique integer value identifying this Game.
  #        in: path
  #        name: id
  #        required: true
  #        type: integer
  #    patch:
  #      requestBody:
  #        content:
  #          application/json:
  #            schema:
  #              oneOf:
  #                - $ref: '#/definitions/Cat'
  #                - $ref: '#/definitions/Dog'
  #              discriminator:
  #                propertyName: pet_type
  #      responses:
  #        '200':
  #          description: Updated
  /customers:
    get:
      responses:
        200:
          description: OK
          schema:
            type: array
            x-nullable: true
            items:
              $ref: '#/definitions/customer'
  /dictionaries:
    get:
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Dictionary'
  /file/{id}:
    get:
      parameters:
        - in: path
          name: id
          type: string
          required: true
      responses:
        200:
          description: Desired file
          schema:
            type: 'file'
  /randomObject:
    get:
      responses:
        200:
          description: This returns Object
          schema:
            type: object
  /randomModel:
    get:
      responses:
        200:
          description: This returns object
          schema:
            properties:
              key:
                type: string
  /randomString:
    get:
      responses:
        200:
          description: This returns string
          schema:
            type: string
definitions:
  ItemList:
    description: List of items,
    required:
      - data
    type: object
    properties:
      data:
        description: List of controllers in the system (this can be empty)
        type: array
        items:
          $ref: '#/definitions/Data'
  ItemModelList:
    description: List of Item models
    required:
      - data
    type: object
    properties:
      data:
        description: The list of available ItemModels and their configurations
        type: array
        items:
          $ref: '#/definitions/DataModel'
  myInterface:
    type: object
    properties:
      myName:
        type: string
      myId:
        type: string
      myMap:
        type: object
        additionalProperties:
          $ref: '#/definitions/Data'
  Data:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      phone:
        type: string
        format: phone
      title:
        type: string
        format: phone
  DataModel:
    type: object
    properties:
      id:
        type: integer
        format: int64
      entities:
        type: array
        items:
          type: number
          format: int64
      roleId:
        type: number
        format: int64
      imageData:
        type: string
        description: base64 user uploaded image string
      imageUrl:
        type: string
        description: url to user avatar image
      text:
        title: TextInput
        allOf:
          - $ref: '#/definitions/ItemList'
          - $ref: '#/definitions/Data'
            description: The natural language text to be processed
      testWithArray:
        title: TextInput
        allOf:
          - type: array
            items: { type: object, '$ref': '#/definitions/Pet' }
          - $ref: '#/definitions/Data'
            description: The natural language text to be processed
      audioConfig:
        title: InputAudioConfig
        allOf:
          - $ref: '#/definitions/Data'
            description: Instructs the speech recognizer how to process the speech audio
      metadata:
        description: '{ [key: string]: any } or object'
        type: object
        additionalProperties:
          description: Some desc
      details:
        description: >-
          { [key: string]: any }[] or object[]
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
  Table:
    type: object
    properties:
      tableHead:
        type: array
        items:
          $ref: '#/definitions/DataModel'
      tableData:
        type: array
        items:
          type: array
          items:
            $ref: '#/definitions/DataModel'
      someOtherData:
        type: array
        items:
          type: array
          items:
            type: number
  TestModel:
    type: object
    properties:
      count:
        type: integer
        description: sum of everything there is converted to bananas
      42test:
        type: string
      some-key:
        type: string
      anotherKey@:
        type: string
      yet@notherKey:
        type: string
  Pet:
    type: object
    required:
      - pet_type
    properties:
      pet_type:
        type: string
    discriminator: pet_type
  Dog:
    allOf: # Combines the main `Pet` schema with `Dog`-specific properties
      - $ref: '#/definitions/Pet'
      - type: object
        # all other properties specific to a `Dog`
        properties:
          bark:
            type: boolean
          breed:
            type: string
            enum: [Dingo, Husky, Retriever, Shepherd]
  Cat:
    allOf: # Combines the main `Pet` schema with `Cat`-specific properties
      - $ref: '#/definitions/Pet'
      - type: object
        # all other properties specific to a `Cat`
        properties:
          hunts:
            type: boolean
          age:
            type: integer
          eaten:
            type: array
            items:
              type: object
              $ref: '#/definitions/Mouse'
  Mouse:
    properties:
      color:
        type: string
    allOf:
      - $ref: '#/definitions/Pet'
      - type: object
  model:
    type: 'object'
    properties:
      id:
        type: 'string'
      created:
        type: 'integer'
      updated:
        type: 'integer'
      deleted:
        type: 'integer'
      recursivePointer:
        $ref: '#/definitions/model'
  customer:
    type: 'object'
    allOf:
      - $ref: '#/definitions/model'
    properties:
      name:
        type: 'string'
      address:
        type: 'string'
      right:
        $ref: '#/definitions/right'
  right:
    type: string
    enum:
      - MEMBER
      - ADMIN
      - 'VIEW_ALL'
      - 'VIEW_MY'
      - 'VIEW_EDIT'
      - 'READ WRITE'
      - 'CONTROL'
  position:
    type: integer
    enum:
      - 1
      - 2
      - 3
    description: |
      - 1 First
      - 2 Second
      - 3 Third
  Dictionary:
    type: object
    additionalProperties:
      $ref: '#/definitions/DictionaryItem'
  DictionaryItem:
    type: object
    additionalProperties:
      type: number

  PageDataRules:
    type: object
    additionalProperties:
      type: array
      items:
        type: string
  PageData:
    type: object
    properties:
      appliedIf:
        $ref: '#/definitions/PageDataRules'
  interfaceWithDictionary:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      customers:
        description: '{ [key: string]: Customer }'
        type: object
        additionalProperties:
          $ref: '#/definitions/customer'
  interfaceWithSimpleDictionary:
    type: object
    required:
      - foo
    properties:
      foo:
        description: '{ [key: string]: number }'
        type: object
        additionalProperties:
          type: number
  interfaceWithDictionaryOfArraysOfNumbers:
    type: object
    required:
      - dicOfNumberArrays
    description: 'interesting'
    properties:
      dicOfNumberArrays:
        description: '{ [key: string]: number[] }'
        additionalProperties:
          type: array
          items:
            type: number
  interfaceWithArrayOfDictionariesOfNumbers:
    type: object
    required:
      - arrayOfDicsOfNumbers
    properties:
      arrayOfDicsOfNumbers:
        description: '{ [key: string]: number }[]'
        type: array
        items:
          additionalProperties:
            type: number
  interfaceWithArrayOfDictionariesOfRights:
    type: object
    properties:
      foo:
        description: '{ [key: string]: Right }[]'
        type: array
        items:
          additionalProperties:
            $ref: '#/definitions/right'
  interfaceWithArrayOfDictionariesOfArrayOfRights:
    type: object
    properties:
      foo:
        description: '{ [key: string]: Right[] }[]'
        type: array
        items:
          additionalProperties:
            type: array
            items:
              $ref: '#/definitions/right'
  v1ContentModelArray:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
      itemSchema:
        $ref: '#/definitions/v1ContentModelElement'
        title: |-
          Schema of a array item
          Could be of any type
  v1ContentModelBool:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
      default:
        type: boolean
        format: boolean
        title: Default value for boolean
  v1ContentModelDouble:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
      default:
        type: number
        format: double
        title: Default value of the floating point number
      minimum:
        type: number
        format: double
        title: 'Minimum float value, defaults to negative infinity'
      maximum:
        type: number
        format: double
        title: 'Maximum float value, defaults to positive infinity'
      enum:
        type: array
        items:
          type: number
          format: double
        title: Array of possible values for the property
  v1ContentModelElement:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
        title: Element meta information
      object:
        $ref: '#/definitions/v1ContentModelObject'
      array:
        $ref: '#/definitions/v1ContentModelArray'
      int:
        $ref: '#/definitions/v1ContentModelInteger'
      double:
        $ref: '#/definitions/v1ContentModelDouble'
      string:
        $ref: '#/definitions/v1ContentModelString'
      bool:
        $ref: '#/definitions/v1ContentModelBool'
  v1ContentModelField:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
        title: Field meta information
      key:
        type: string
        title: 'Field name, dictionary key'
      object:
        $ref: '#/definitions/v1ContentModelObject'
      array:
        $ref: '#/definitions/v1ContentModelArray'
      int:
        $ref: '#/definitions/v1ContentModelInteger'
      double:
        $ref: '#/definitions/v1ContentModelDouble'
      string:
        $ref: '#/definitions/v1ContentModelString'
      bool:
        $ref: '#/definitions/v1ContentModelBool'
  v1ContentModelInteger:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
      default:
        type: string
        format: int64
        title: Default value for integer property
      minimum:
        type: string
        format: int64
        title: 'Minimum integer value, defaults to negative infinity'
      maximum:
        type: string
        format: int64
        title: 'Maximum integer value, defaults to positive infinity'
      enum:
        type: array
        items:
          type: string
          format: int64
        title: Array of possible values for the property
  v1ContentModelMetaInfo:
    type: object
    properties:
      title:
        type: string
        title: Name or a short description of the object
      description:
        type: string
        title: Descriptive text about the object
      customId:
        type: string
        title: |-
          Custom globally unique identifier
          Unset by default but can be set and used as a reference to the element of the content model
      comment:
        type: string
        title: Comment left by the content modeler
  v1ContentModelObject:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
        title: Object meta information
      fields:
        type: array
        items:
          $ref: '#/definitions/v1ContentModelField'
        title: List of object fields
  v1ContentModelString:
    type: object
    properties:
      meta:
        $ref: '#/definitions/v1ContentModelMetaInfo'
      default:
        type: string
        title: Default value for string
      regex:
        type: string
        title: Regular expression that defines a language to which the value of this property must belong
      enum:
        type: array
        items:
          type: string
        title: Array of possible values for the property
  v1ContentModelVersion:
    type: object
    properties:
      contentModelId:
        type: string
        title: Content model ID
      contentModelVersionId:
        type: string
        title: Version ID
      createdAt:
        type: string
        format: date-time
        title: Creation timestamp
      previousVersionId:
        type: string
        title: ID of the previous content model version
      nextVersionId:
        type: string
        title: ID of the newer content model version
      schema:
        $ref: '#/definitions/v1ContentModelObject'
        title: Top level object schema
  v1ContentModelVersionList:
    type: object
    properties:
      versions:
        type: array
        items:
          $ref: '#/definitions/v1ContentModelVersion'
        title: List of content model versions
