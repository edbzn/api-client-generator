/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { DashboardAPIClientInterface } from './dashboard-api-client.interface';
import { Observable } from 'rxjs';import { DefaultHttpOptions, HttpOptions } from '../../types';

import * as models from '../../models';
export const USE_DOMAIN = new InjectionToken<string>('DashboardAPIClient_USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('DashboardAPIClient_USE_HTTP_OPTIONS');

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};

@Injectable()
export class DashboardAPIClient implements DashboardAPIClientInterface {

  readonly options: APIHttpOptions;

  readonly domain: string = `http://localhost:49801`;

  constructor(
    private readonly http: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
    if (domain != null) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(options && options.headers ? options.headers : {}),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress ? { reportProgress: options.reportProgress } : {}),
      ...(options && options.withCredentials ? { withCredentials: options.withCredentials } : {})
    };
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getWidgetTypes(
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.WidgetTypeViewModel[]>;
  getWidgetTypes(
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.WidgetTypeViewModel[]>>;
  getWidgetTypes(
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.WidgetTypeViewModel[]>>;
  getWidgetTypes(
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.WidgetTypeViewModel[] | HttpResponse<models.WidgetTypeViewModel[]> | HttpEvent<models.WidgetTypeViewModel[]>> {
    const path = `/api/dashboards/widgettypes`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.WidgetTypeViewModel[]>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  get(
    args: Exclude<DashboardAPIClientInterface['getParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.DashboardViewModel>;
  get(
    args: Exclude<DashboardAPIClientInterface['getParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.DashboardViewModel>>;
  get(
    args: Exclude<DashboardAPIClientInterface['getParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.DashboardViewModel>>;
  get(
    args: Exclude<DashboardAPIClientInterface['getParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.DashboardViewModel | HttpResponse<models.DashboardViewModel> | HttpEvent<models.DashboardViewModel>> {
    const path = `/api/dashboards/${args.dashboardId}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.DashboardViewModel>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  getSettings(
    args: Exclude<DashboardAPIClientInterface['getSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.RowModel[]>;
  getSettings(
    args: Exclude<DashboardAPIClientInterface['getSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.RowModel[]>>;
  getSettings(
    args: Exclude<DashboardAPIClientInterface['getSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.RowModel[]>>;
  getSettings(
    args: Exclude<DashboardAPIClientInterface['getSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<models.RowModel[] | HttpResponse<models.RowModel[]> | HttpEvent<models.RowModel[]>> {
    const path = `/api/dashboards/${args.dashboardId}/settings`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.RowModel[]>(`${this.domain}${path}`, options);
  }

  /**
   * Response generated for [ 200 ] HTTP response code.
   */
  putSettings(
    args: Exclude<DashboardAPIClientInterface['putSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  putSettings(
    args: Exclude<DashboardAPIClientInterface['putSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  putSettings(
    args: Exclude<DashboardAPIClientInterface['putSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  putSettings(
    args: Exclude<DashboardAPIClientInterface['putSettingsParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/api/dashboards/${args.dashboardId}/settings`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.put<object>(`${this.domain}${path}`, JSON.stringify(args.rows), options);
  }

}
