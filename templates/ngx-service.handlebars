{{> header}}

import { {{#if (templateType 'service' 'guardedService')}}HttpClient, {{/if}}{{#if (templateType 'service')}}HttpHeaders, HttpParams, {{/if}}HttpResponse, HttpEvent } from '@angular/common/http';
{{#if (templateType 'service' 'guardedService')}}import { Inject, Injectable, {{#if (templateType 'service')}}InjectionToken, {{/if}}Optional } from '@angular/core';
import { {{&interfaceName}} } from './{{&interfaceFileName}}';
{{/if}}import { Observable } from 'rxjs';{{#if (templateType 'guardedService')}}
import { tap } from 'rxjs/operators';
import { USE_DOMAIN, USE_HTTP_OPTIONS, {{&serviceName}} } from './{{&serviceFileName}}';
{{/if}}import { {{#if (templateType 'service' 'guardedService')}}DefaultHttpOptions, {{/if}}HttpOptions } from '{{#if serviceTag}}../.{{/if}}./types';

{{#if definitions.length}}
import * as models from '.{{#if swaggerTag}}./..{{/if}}/models';{{#if (templateType 'guardedService')}}
import * as guards from '.{{#if swaggerTag}}./..{{/if}}/guards';
{{/if}}{{/if}}{{#if (templateType 'service')}}
export const USE_DOMAIN = new InjectionToken<string>('{{&serviceName}}_USE_DOMAIN');
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>('{{&serviceName}}_USE_HTTP_OPTIONS');

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};
{{/if}}

{{#if (templateType 'service' 'guardedService')}}@Injectable()
export class {{#if (templateType 'guardedService')}}Guarded{{&serviceName}} extends {{/if}}{{&serviceName}} implements {{&interfaceName}}{{/if}}{{#if (templateType 'interface')}}export interface {{&interfaceName}}{{/if}} {
{{#if (templateType 'service' 'guardedService')}}{{#if (templateType 'service')}}
  readonly options: APIHttpOptions;

  readonly domain: string = `{{&domain}}`;
  {{/if}}

  constructor(
    {{#if (templateType 'service')}}private {{/if}}readonly http{{#if (templateType 'guardedService')}}Client{{/if}}: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
  {{#if (templateType 'service')}}
    if (domain != null) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(options && options.headers ? options.headers : {}),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress ? { reportProgress: options.reportProgress } : {}),
      ...(options && options.withCredentials ? { withCredentials: options.withCredentials } : {})
    };
  {{else}}
    super(httpClient, domain, options);
  {{/if}}
  }

{{/if}}
{{#methods}}{{#if (templateType 'interface')}}{{#if parameters.length}}  /**
   * Arguments object for method `{{&methodName}}`.
   */
  {{&methodName}}Params?: {
    {{#each parameters}}
    {{#if description}}/** {{#unless isRequired}} (optional){{/unless}} {{&description}} */
    {{/if}}{{camelCase name}}{{^isRequired}}?{{/isRequired}}: {{&type}},
    {{/each}}
  };

{{/if}}{{/if}}{{#if description}}  {{&description}}
{{/if}}  {{&methodName}}(
  {{#if parameters.length}}
    args{{#if paramsOptional}}?: {{else}}: Exclude<{{/if}}{{&../interfaceName}}['{{&methodName}}Params']{{#if paramsOptional}}{{else}}, undefined>{{/if}},
  {{/if}}
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<{{&responseTypeSchema.type}}>;
  {{&methodName}}(
  {{#if parameters.length}}
    args{{#if paramsOptional}}?: {{else}}: Exclude<{{/if}}{{&../interfaceName}}['{{&methodName}}Params']{{#if paramsOptional}}{{else}}, undefined>{{/if}},
  {{/if}}
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<{{&responseTypeSchema.type}}>>;
  {{&methodName}}(
  {{#if parameters.length}}
    args{{#if paramsOptional}}?: {{else}}: Exclude<{{/if}}{{&../interfaceName}}['{{&methodName}}Params']{{#if paramsOptional}}{{else}}, undefined>{{/if}},
  {{/if}}
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<{{&responseTypeSchema.type}}>>;{{#if (templateType 'service' 'guardedService')}}
  {{&methodName}}(
  {{#if parameters.length}}
    args: {{#if paramsOptional}}{{&../interfaceName}}['{{&methodName}}Params'] = {}{{else}}Exclude<{{&../interfaceName}}['{{&methodName}}Params'], undefined>{{/if}},
  {{/if}}
    requestHttpOptions?: HttpOptions,
    observe{{#if (templateType 'service' 'guardedService')}}: any = 'body'{{else}}?: any{{/if}},
  ): Observable<{{&responseTypeSchema.type}} | HttpResponse<{{&responseTypeSchema.type}}> | HttpEvent<{{&responseTypeSchema.type}}>> {
{{#if (templateType 'service')}}
    const path = `{{&path}}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,{{#requestResponseType}}
      responseType: 'blob' as 'json',{{/requestResponseType}}
    };

    {{#parameters}}
      {{#isQueryParameter}}
    if ('{{&camelCaseName}}' in args) {
          {{#isArray}}
      if (args.{{&camelCaseName}} && args.{{&camelCaseName}}.length) {
        options.params = args.{{&camelCaseName}}.reduce<HttpParams>((acc, cur) => acc.append('{{&name}}', `${cur}`), options.params);
      }
          {{/isArray}}
          {{^isArray}}
      options.params = options.params.set('{{&name}}', String(args.{{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isQueryParameter}}
      {{#isHeaderParameter}}
    if ('{{&camelCaseName}}' in args) {
          {{#isArray}}
      if (args.{{&camelCaseName}} && args.{{&camelCaseName}}.length) {
        options.headers = options.headers.set('{{&name}}', args.{{&camelCaseName}}.map(value => `${value}`));
      }
          {{/isArray}}
          {{^isArray}}
      options.headers = options.headers.set('{{&name}}', String(args.{{&camelCaseName}}));
          {{/isArray}}
    }
      {{/isHeaderParameter}}
    {{/parameters}}
    {{#if formData.length}}
    const formData = new FormData();
    {{#formData}}
    if (args.{{&camelCaseName}} != undefined) {
      formData.append('{{&name}}', args.{{&camelCaseName}});
    }
    {{/formData}}

    {{/if}}
    return this.http.{{methodType}}<{{&responseTypeSchema.type}}>(`${this.domain}${path}`{{#if body}}, {{body}}{{/if}}, options);{{else}}
    return super.{{&methodName}}({{#if parameters.length}}args, {{/if}}requestHttpOptions, observe){{#responseGuard}}
      .pipe(tap((res: any) => {{&../responseGuard}} || console.error(`TypeGuard for response '{{&../responseTypeSchema.type}}' caught inconsistency.`, res))){{/responseGuard}};{{/if}}
  }{{/if}}

{{/methods}}
}
