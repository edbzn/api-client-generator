{{> header}}

import { HttpClient } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DefaultHttpOptions, HttpOptions } from '{{#if serviceTag}}../.{{/if}}./types';
import { USE_DOMAIN, USE_HTTP_OPTIONS, {{&serviceName}} } from './{{&serviceFileName}}';
import { {{&interfaceName}} } from './{{&interfaceFileName}}';

{{#if definitions.length}}
import * as models from '.{{#if swaggerTag}}./..{{/if}}/models';
import * as guards from '.{{#if swaggerTag}}./..{{/if}}/guards';
{{/if}}

@Injectable()
export class Guarded{{&serviceName}} extends {{&serviceName}} implements {{&interfaceName}} {

  constructor(readonly httpClient: HttpClient,
              @Optional() @Inject(USE_DOMAIN) domain?: string,
              @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions) {
    super(httpClient, domain, options);
  }

{{#methods}}
{{#if responseGuard}}  {{&methodName}}(
  {{#if parameters.length}}
    args: Exclude<{{&../interfaceName}}['{{&methodName}}Params'], undefined>,
  {{/if}}
    requestHttpOptions?: HttpOptions
  ): Observable<{{&responseTypeSchema.type}}> {
    return super.{{&methodName}}({{#if parameters.length}}args, {{/if}}requestHttpOptions){{#responseGuard}}
      .pipe(tap((res: any) => {{&../responseGuard}} || console.error(`TypeGuard for response '{{&../responseTypeSchema.type}}' caught inconsistency.`, res))){{/responseGuard}};
  }

{{/if}}
{{/methods}}
}
